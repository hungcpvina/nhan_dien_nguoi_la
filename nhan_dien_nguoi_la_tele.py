import cv2
import time
import os
import sys
import math
from PIL import Image, ImageTk
from PIL import ImageFilter
import tkinter as tk
from tkinter import ttk
from tkinter import filedialog
import logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s:%(message)s",
    datefmt="%H:%M:%S")
from multiprocessing import Process, current_process, set_start_method, freeze_support
import requests
from ultralytics import YOLO

# =================== C·∫§U H√åNH CHUNG ===================

# C√°c l·ªõp ƒë·ªëi t∆∞·ª£ng c·∫ßn c·∫£nh b√°o
classes_to_alert = ["nguoi_la", "nguoi_do"]

# C√°c h·∫±ng s·ªë x·ª≠ l√Ω
MAX_RETRY = 5 
PROCESSING_INTERVAL = 3    # Ch·∫°y inference m·ªói 3 gi√¢y ƒë·ªÉ gi·∫£m t·∫£i
ALERT_INTERVAL = 120        # C√°ch nhau 60 gi√¢y gi·ªØa c√°c l·∫ßn c·∫£nh b√°o
REPEATED_ALERT_INTERVAL = 300  # 5 ph√∫t gi·ªØa c√°c l·∫ßn c·∫£nh b√°o c√πng m·ªôt ƒë·ªëi t∆∞·ª£ng
window_name = "Camera Feed"
DISPLAY_WIDTH = 400        # C·ª≠a s·ªï video hi·ªÉn th·ªã c√≥ ƒë·ªô r·ªông c·ªë ƒë·ªãnh (kho·∫£ng 4 inch - v√≠ d·ª• 400 pixel)
DISPLAY_HEIGHT = 300       # Chi·ªÅu cao hi·ªÉn th·ªã (b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)
detected_objects = {}  # L∆∞u th√¥ng tin v·ªÅ c√°c ƒë·ªëi t∆∞·ª£ng ƒë√£ ph√°t hi·ªán
last_alert_time = {}
has_lost_connection = False  # üÜï Bi·∫øn tr·∫°ng th√°i ƒë·ªÉ ngƒÉn spam c·∫£nh b√°o
motion_check_interval = 10
frame_idx = 0
full_threshold = 5000

DURATION_THRESH = 1      # gi√¢y
MOVE_THRESH     = 30       # pixel: v√πng di chuy·ªÉn nh·ªè
MATCH_THRESH    = 50       # pixel: ƒë·ªÉ match box v·ªõi tracker
MAX_IDLE        = 2      # gi√¢y: x√≥a tracker kh√¥ng th·∫•y update


# =================== H√ÄM G·ª¨I C·∫¢NH B√ÅO QUA TELEGRAM ===================
def send_alert_to_telegram(image, object_id):
    try:
        current_time = time.time()
        alert_interval = 300  # 5 ph√∫t gi·ªØa c√°c l·∫ßn c·∫£nh b√°o c√πng m·ªôt ƒë·ªëi t∆∞·ª£ng
        # Ki·ªÉm tra n·∫øu ƒë·ªëi t∆∞·ª£ng ƒë√£ ƒë∆∞·ª£c c·∫£nh b√°o g·∫ßn ƒë√¢y
        if object_id in last_alert_time:
            if current_time - last_alert_time[object_id] < alert_interval:
                logging.info(f"ƒê·ªëi t∆∞·ª£ng {object_id} ƒë√£ ƒë∆∞·ª£c c·∫£nh b√°o g·∫ßn ƒë√¢y. Ch·ªù {alert_interval} gi√¢y tr∆∞·ªõc khi g·ª≠i l·∫°i.")
                return False  # Kh√¥ng g·ª≠i c·∫£nh b√°o ngay

        _, img_encoded = cv2.imencode('.jpg', image)
        files = {'photo': ('alert.jpg', img_encoded.tobytes(), 'image/jpeg')}
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto"
        data = {'chat_id': CHAT_ID, 'caption': '‚ö†Ô∏è C·∫£nh b√°o ! Ph√°t hi·ªán ng∆∞·ªùi l·∫°!'}
        response = requests.post(url, files=files, data=data, timeout=10)

        if response.ok:
            logging.info("ƒê√£ g·ª≠i c·∫£nh b√°o qua Telegram th√†nh c√¥ng.")
            last_alert_time[object_id] = current_time  # C·∫≠p nh·∫≠t th·ªùi gian c·∫£nh b√°o cho ƒë·ªëi t∆∞·ª£ng
            return True
        else:
            logging.warning(f"Telegram tr·∫£ v·ªÅ l·ªói: {response.text}")
            return False
    except Exception as e:
        logging.error(f"L·ªói khi g·ª≠i c·∫£nh b√°o Telegram: {e}")
        return False
# =================== H√ÄM GIAO DI·ªÜN CH·ªåN THAM S·ªê (Tkinter GUI) ===================
def make_transparent(image_path, opacity=30):  # üÜï ƒê·ªô m·ªù 30% (c√≥ th·ªÉ ch·ªânh th·∫•p h∆°n)
    image = Image.open(image_path).convert("RGBA")  
    alpha = image.split()[3]  
    alpha = alpha.point(lambda p: int(p * opacity / 100))  
    image.putalpha(alpha)  
    return ImageTk.PhotoImage(image)

def select_parameters():
    # üÜï Kh·ªüi t·∫°o params ƒë√∫ng c√°ch
    params = {"telegram_token": "", "chat_id": "", "rtsp_links": [], "model_path": "", "alert_folder": "", "video_path": ""}
    root = tk.Tk()
    root.title("C·∫•u h√¨nh Camera & M√¥ h√¨nh")
    root.configure(bg="#f0f0f0")  # M√†u n·ªÅn c·ªßa c·ª≠a s·ªï
    root.geometry("800x600")
    style = ttk.Style()
    style.theme_use("clam")
     # üÜï C√°c bi·∫øn ch·ª©a th√¥ng s·ªë c·ªßa giao di·ªán
    telegram_token_var = tk.StringVar()
    chat_id_var = tk.StringVar()
    rtsp_var1 = tk.StringVar()
    rtsp_var2 = tk.StringVar()
    rtsp_var3 = tk.StringVar()
    rtsp_var4 = tk.StringVar()
    model_path_var = tk.StringVar()
    alert_folder_var = tk.StringVar()
    video_path_var = tk.StringVar()

# üÜï H√†m ch·ªçn file m√¥ h√¨nh
    def browse_model():
        fp = filedialog.askopenfilename(title="Ch·ªçn file m√¥ h√¨nh (best.pt)", filetypes=[("PyTorch Model", "*.pt"), ("All files", "*.*")])
        if fp:
            model_path_var.set(fp)
    # üÜï H√†m ch·ªçn th∆∞ m·ª•c l∆∞u ·∫£nh c·∫£nh b√°o
    def browse_folder():
        folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c l∆∞u ·∫£nh c·∫£nh b√°o")
        if folder:
            alert_folder_var.set(folder)
    # üÜï H√†m ch·ªçn file video m·∫´u
    def browse_video():
        file_path = filedialog.askopenfilename(title="Ch·ªçn video m·∫´u", filetypes=[("Video Files", "*.mp4 *.avi *.mov")])
        if file_path:
            video_path_var.set(file_path)
      # üÜï Hi·ªÉn th·ªã logo n·ªÅn v·ªõi ƒë·ªô trong su·ªët
    bg_image = make_transparent("D:/nhan_dien_nguoi_la/logo.jpg", opacity=30)
    # üÜï ƒê·∫∑t logo l√†m n·ªÅn b·∫±ng Label
    bg_label = tk.Label(root, image=bg_image)
    bg_label.place(x=0, y=0, relwidth=1, relheight=1)  
    bg_label.lower()  # üÜï ƒê·∫£m b·∫£o logo kh√¥ng che ph·∫ßn nh·∫≠p li·ªáu
# üÜï Gi·ªØ ·∫£nh ƒë·ªÉ tr√°nh b·ªã xo√° (ƒê·∫∑t sau khi `bg_label` ƒë√£ kh·ªüi t·∫°o)
    bg_label.image = bg_image
     # üÜï T·∫°o canvas ƒë·ªÉ ƒë·∫∑t ·∫£nh n·ªÅn ph√≠a d∆∞·ªõi
    canvas = tk.Canvas(root, width=800, height=600)
    canvas.place(x=0, y=0, width=800, height=600)
    canvas.create_image(400, 300, anchor="center", image=bg_image)  
    canvas.image = bg_image 
   
   # üÜï Th√™m th√¥ng tin t√°c gi·∫£ ph·∫ßn m·ªÅm v√†o g√≥c b√™n ph·∫£i (b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh v·ªã tr√≠ x, y cho ph√π h·ª£p)
    tk.Label(root, 
         text="Ph√°t tri·ªÉn b·ªüi: C.P Vietnam Corporation \nSwine Veterinary and Biosecurity Department \n(B·ªô ph·∫≠n Th√∫ y v√† Ph√≤ng d·ªãch)", 
         bg="#f0f0f0", 
         fg="black", 
         font=("Helvetica", 10, "italic")).place(x=510, y=10)
    tk.Label(root, text="Telegram Token:", bg="#f0f0f0", fg="black").place(x=50, y=50)
    tk.Entry(root, textvariable=telegram_token_var, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=50)

    tk.Label(root, text="Telegram Chat ID:", bg="#f0f0f0", fg="black").place(x=50, y=100)
    tk.Entry(root, textvariable=chat_id_var, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=100)

    tk.Label(root, text="RTSP Link 1:", bg="#f0f0f0", fg="black").place(x=50, y=150)
    tk.Entry(root, textvariable=rtsp_var1, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=150)

    tk.Label(root, text="RTSP Link 2:", bg="#f0f0f0", fg="black").place(x=50, y=200)
    tk.Entry(root, textvariable=rtsp_var2, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=200)

    tk.Label(root, text="RTSP Link 3:", bg="#f0f0f0", fg="black").place(x=50, y=250)
    tk.Entry(root, textvariable=rtsp_var3, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=250)

    tk.Label(root, text="RTSP Link 4:", bg="#f0f0f0", fg="black").place(x=50, y=300)
    tk.Entry(root, textvariable=rtsp_var4, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=300)

    tk.Label(root, text="Model Path (best.pt):", bg="#f0f0f0", fg="black").place(x=50, y=350)
    tk.Entry(root, textvariable=model_path_var, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=350)
    tk.Button(root, text="Browse", command=browse_model, bg="#d3d3d3", fg="black", relief="raised", bd=3).place(x=510, y=348)

    tk.Label(root, text="Alert Image Folder:", bg="#f0f0f0", fg="black").place(x=50, y=400)
    tk.Entry(root, textvariable=alert_folder_var, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=400)
    tk.Button(root, text="Browse", command=browse_folder, bg="#d3d3d3", fg="black", relief="raised", bd=3).place(x=510, y=398)

    tk.Label(root, text="Video Test:", bg="#f0f0f0", fg="black").place(x=50, y=450)
    tk.Entry(root, textvariable=video_path_var, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=450)
    tk.Button(root, text="Browse", command=browse_video, bg="#d3d3d3", fg="black", relief="raised", bd=3).place(x=510, y=448)

    # üÜï N√∫t Start
    def on_start():
        params["telegram_token"] = telegram_token_var.get()
        params["chat_id"] = chat_id_var.get()
        params["rtsp_links"] = [rtsp_var1.get(), rtsp_var2.get(), rtsp_var3.get(), rtsp_var4.get()]
        params["model_path"] = model_path_var.get()
        params["alert_folder"] = alert_folder_var.get()
        params["video_path"] = video_path_var.get() if not any(params["rtsp_links"]) else None
        root.destroy()
        run_camera(params)
# V√≠ d·ª• s·ª≠ d·ª•ng ttk.Button thay cho tk.Button:
    ttk.Button(root, text="Start", command=on_start, style="TButton").place(x=250, y=500)
    root.mainloop()

    # Ki·ªÉm tra n·∫øu thi·∫øu Token ho·∫∑c Chat ID th√¨ kh√¥ng ch·∫°y ti·∫øp
    if not params["telegram_token"] or not params["chat_id"]:
        logging.error("L·ªói: Telegram Token ho·∫∑c Chat ID ch∆∞a nh·∫≠p!")
        return {}
    return params

# =================== H√ÄM X·ª¨ L√ù CAMERA (Ch·∫°y trong ti·∫øn tr√¨nh ri√™ng, kh√¥ng c√≥ GUI) ===================
def send_alert_to_telegram(image, telegram_token, chat_id):
    if not telegram_token or not chat_id:
        logging.error("L·ªói: Telegram Token ho·∫∑c Chat ID ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!")
        return False
    try:
        _, img_encoded = cv2.imencode('.jpg', image)
        files = {'photo': ('alert.jpg', img_encoded.tobytes(), 'image/jpeg')}
        url = f"https://api.telegram.org/bot{telegram_token}/sendPhoto"
        data = {'chat_id': chat_id, 'caption': '‚ö†Ô∏è C·∫£nh b√°o ! Ph√°t hi·ªán ng∆∞·ªùi l·∫°!'}
        response = requests.post(url, files=files, data=data, timeout=10)
        if response.ok:
            logging.info("ƒê√£ g·ª≠i c·∫£nh b√°o qua Telegram th√†nh c√¥ng.")
            return True
        else:
            logging.warning(f"Telegram tr·∫£ v·ªÅ l·ªói: {response.text}")
            return False
    except requests.RequestException as e:
        logging.error(f"L·ªói khi g·ª≠i ·∫£nh Telegram (RequestException): {e}")
        return False
    except Exception as e:
        logging.error(f"L·ªói khi g·ª≠i ·∫£nh Telegram (Unexpected): {e}")
        return False
# ================ H√†m m·ªõi: g·ª≠i tin nh·∫Øn vƒÉn b·∫£n ===================
def send_text_to_telegram(message, telegram_token, chat_id):
    if not telegram_token or not chat_id:
        logging.error("L·ªói: Telegram Token ho·∫∑c Chat ID ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!")
        return False
    try:
        url = f"https://api.telegram.org/bot{telegram_token}/sendMessage"
        payload = {'chat_id': chat_id, 'text': message}
        response = requests.post(url, json=payload, timeout=10)

        if response.ok:
            logging.info("ƒê√£ g·ª≠i tin nh·∫Øn qua Telegram th√†nh c√¥ng.")
            return True
        else:
            logging.warning(f"Telegram tr·∫£ v·ªÅ l·ªói: {response.text}")
            return False
    except requests.RequestException as e:
        logging.error(f"L·ªói khi g·ª≠i tin nh·∫Øn Telegram (RequestException): {e}")
        return False
    except Exception as e:
        logging.error(f"L·ªói khi g·ª≠i tin nh·∫Øn Telegram (Unexpected): {e}")
        return False
# ============== H√†m ki·ªÉm tra k·∫øt n·ªëi camera RTSP ================
def check_camera_connection(rtsp_url, window_name, telegram_token, chat_id):
    cap = cv2.VideoCapture(rtsp_url)
    opened = cap.isOpened()
    cap.release()
    if not opened:
        logging.error(f"‚ùå [{window_name}] M·∫•t k·∫øt n·ªëi camera!")
        send_text_to_telegram(f"‚ö†Ô∏è C·∫£nh b√°o! M·∫•t k·∫øt n·ªëi v·ªõi {window_name}", telegram_token, chat_id)
        return False
    return True
# ===================== H√†m ch√≠nh ch·∫°y camera =====================
def run_camera(rtsp_url, window_name, model_path,
               alert_folder, processing_interval,
               telegram_token, chat_id, video_path=None):
    logging.info(f"[{window_name}] Kh·ªüi ƒë·ªông...")
    rtsp_url = rtsp_url.strip() if rtsp_url else None
    # T·∫£i model
    try:
        model = YOLO(model_path)
        logging.info(f"[{window_name}] M√¥ h√¨nh ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!")
    except Exception as e:
        logging.error(f"[{window_name}] L·ªói t·∫£i m√¥ h√¨nh: {e}")
        return
    # M·ªü k·∫øt n·ªëi RTSP ho·∫∑c video m·∫´u
    retry_count = 0
    cap = None
    if rtsp_url:
        if not check_camera_connection(rtsp_url, window_name, telegram_token, chat_id):
            return
        while retry_count < MAX_RETRY:
            cap = cv2.VideoCapture(rtsp_url)
            cap.set(cv2.CAP_PROP_FPS, 30)
            cap.set(cv2.CAP_PROP_BUFFERSIZE, 10)
            if cap.isOpened():
                logging.info(f"[{window_name}] K·∫øt n·ªëi RTSP th√†nh c√¥ng!")
                break
            cap.release()
            retry_count += 1
            time.sleep(3)
        if not cap or not cap.isOpened():
            logging.error(f"[{window_name}] Kh√¥ng th·ªÉ m·ªü RTSP sau {MAX_RETRY} l·∫ßn th·ª≠!")
            send_text_to_telegram(
                f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi RTSP v·ªõi {window_name} sau {MAX_RETRY} l·∫ßn th·ª≠.",
                telegram_token, chat_id)
            return
    else:
        logging.info(f"[{window_name}] Ch·∫°y v·ªõi video m·∫´u: {video_path}")
        cap = cv2.VideoCapture(video_path)
     # Bi·∫øn tr·∫°ng th√°i k·∫øt n·ªëi
    paused = False
    freeze_frame = None  # Bi·∫øn l∆∞u ·∫£nh d·ª´ng (freeze) khi t·∫°m d·ª´ng
    has_lost_connection = False
    last_inference = 0
    last_alert_time = 0
     # ‚Äî‚Äî KH·ªûI T·∫†O CHO TRACKING STATIC FILTER ‚Äî‚Äî 
    trackers = []        # danh s√°ch tracker cho m·ªói camera
    next_id  = 0         # id ti·∫øp theo cho tracker
     # Thi·∫øt l·∫≠p c·ª≠a s·ªï hi·ªÉn th·ªã
    cv2.namedWindow(window_name, cv2.WINDOW_NORMAL)
    cap_fps = cap.get(cv2.CAP_PROP_FPS)
    logging.info(f"[{window_name}] FPS lu·ªìng: {cap_fps}")
    fgbg = cv2.createBackgroundSubtractorMOG2(history=100, varThreshold=50, detectShadows=True)
    motion_check_interval = 5
    frame_idx = 0
    consecutive_detections = 0
    detection_required = 2
    min_confidence   = 0.6
    full_threshold = 5000
    
    def centroid(x1, y1, x2, y2):
        return ((x1+x2)//2, (y1+y2)//2)
    def dist(a, b):
        return math.hypot(a[0]-b[0], a[1]-b[1])
    while True:
        time.sleep(0.1)
        cap.grab()
        ret, frame = cap.retrieve()

        # ‚Äî‚Äî‚Äî X·ª≠ l√Ω m·∫•t k·∫øt n·ªëi ‚Äî‚Äî‚Äî
        if not ret:
            if rtsp_url:
                if not has_lost_connection:
                    logging.warning(f"[{window_name}] M·∫•t k·∫øt n·ªëi RTSP, ƒëang th·ª≠ l·∫°i...")
                    send_text_to_telegram(
                        f"‚ö†Ô∏è Camera {window_name} m·∫•t k·∫øt n·ªëi RTSP. ƒêang t·ª± ƒë·ªông kh√¥i ph·ª•c...",
                        telegram_token, chat_id)
                    has_lost_connection = True
                cap.release()
                time.sleep(3)
                retry = 0
                while retry < MAX_RETRY:
                    cap = cv2.VideoCapture(rtsp_url)
                    if cap.isOpened():
                        logging.info(f"[{window_name}] ƒê√£ k·∫øt n·ªëi l·∫°i RTSP.")
                        send_text_to_telegram(
                            f"‚úÖ Camera {window_name} ƒë√£ k·∫øt n·ªëi l·∫°i th√†nh c√¥ng.",
                            telegram_token, chat_id)
                        has_lost_connection = False
                        break
                    cap.release()
                    retry += 1
                    time.sleep(3)
                if not cap or not cap.isOpened():
                    logging.error(f"[{window_name}] Kh√¥ng th·ªÉ k·∫øt n·ªëi l·∫°i sau {MAX_RETRY} l·∫ßn.")
                    break
                continue
            else:
                logging.error(f"[{window_name}] Video m·∫´u ƒë√£ k·∫øt th√∫c!")
                break
        # üîπ Chu·∫©n b·ªã frame & frame‚Äêskipping
        current_time  = time.time()
        display_frame = frame.copy()
        fgmask = fgbg.apply(frame)  
        motion_pixels = cv2.countNonZero(fgmask)
        # n·∫øu chuy·ªÉn ƒë·ªông (s·ªë pixel ƒë·ªïi) ch∆∞a v∆∞·ª£t full_threshold th√¨ skip
        if motion_pixels < full_threshold:
            logging.debug(
                f"[{window_name}] Motion pixels={motion_pixels} < full_th={full_threshold}, skip")
            cv2.imshow(window_name, display_frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
            continue 
        frame_idx    += 1
        if frame_idx % motion_check_interval != 0:
            cv2.imshow(window_name, display_frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
            continue
        # üîπ Ch·∫°y inference & tracking khi t·ªõi l∆∞·ª£t
        if current_time - last_inference >= processing_interval:
            last_inference = current_time
            detections_this_frame = False
            try:
                results = model(display_frame)[0]
                logging.info(f"[{window_name}] Model tr·∫£ v·ªÅ {len(results.boxes)} boxes")
                new_trackers = []
                # duy·ªát qua c√°c box v√† ch·ªâ quan t√¢m l·ªõp trong classes_to_alert
                for box in results.boxes:
                    cls_id = int(box.cls[0])
                    conf   = float(box.conf[0])
                    name   = (model.names[cls_id] if 
                              not isinstance(model.names, dict) 
                              else model.names.get(cls_id))
                    logging.info(f"[{window_name}] Ph√°t hi·ªán {name} v·ªõi confidence={conf:.2f}")
                    if name not in classes_to_alert or conf < min_confidence:
                        continue
                    # t·ªça ƒë·ªô v√† centroid
                    x1, y1, x2, y2 = map(int, box.xyxy[0])
                    c = centroid(x1, y1, x2, y2)
                    # match v·ªõi tracker c≈©
                    matched = None
                    for tr in trackers:
                        if dist(tr['positions'][-1], c) < MATCH_THRESH:
                            matched = tr
                            break
                    # c·∫≠p nh·∫≠t ho·∫∑c t·∫°o m·ªõi tracker
                    if matched:
                        matched['positions'].append(c)
                        matched['last'] = current_time
                        xs = [p[0] for p in matched['positions']]
                        ys = [p[1] for p in matched['positions']]
                        # n·∫øu ƒë·ª©ng y√™n ƒë·ªß l√¢u & ch·ªâ l·∫Øc nh·ªè ‚Üí static
                        if (current_time - matched['start'] >= DURATION_THRESH and
                            max(xs)-min(xs) <= MOVE_THRESH and
                            max(ys)-min(ys) <= MOVE_THRESH):
                            matched['static'] = True
                    else:
                        matched = {
                            'id': next_id,
                            'positions': [c],
                            'start': current_time,
                            'last': current_time,
                            'static': False}
                        next_id += 1
                    new_trackers.append(matched)
                    # n·∫øu tracker ch∆∞a static ‚Üí v·∫Ω box v√† ƒë√°nh d·∫•u detection
                    if not matched['static']:
                        detections_this_frame = True
                        cv2.rectangle(display_frame, (x1, y1), (x2, y2),
                                      (0, 0, 255), 2)
                        cv2.putText(display_frame,
                                    f"{name} {conf:.2f}",
                                    (x1, max(y1-10,10)),
                                    cv2.FONT_HERSHEY_SIMPLEX,
                                    0.7, (0, 0, 255), 2)
                # d·ªçn tracker idle
                trackers = [
                    tr for tr in new_trackers
                    if (current_time - tr['last']) <= MAX_IDLE]
                # c·∫≠p nh·∫≠t counter li√™n ti·∫øp
                if detections_this_frame:
                    consecutive_detections += 1
                    logging.info(f"[{window_name}] consecutive detections = {consecutive_detections}")
                else:
                    consecutive_detections = 0
                logging.debug(
                    f"[{window_name}] check alert: cons={consecutive_detections}, "
                    f"elapsed={(current_time-last_alert_time):.1f}s, "
                    f"threshold={ALERT_INTERVAL}s")
                # n·∫øu ƒë·ªß li√™n ti·∫øp & qua ALERT_INTERVAL ‚Üí l∆∞u ·∫£nh + g·ª≠i Telegram
                if (consecutive_detections >= detection_required and
                    (current_time - last_alert_time) >= ALERT_INTERVAL):
                    logging.info(f"[{window_name}] ‚Üí ƒêi·ªÅu ki·ªán alert th·ªèa, g·ª≠i Telegram")
                    filename = os.path.join(
                        alert_folder, f"alert_{int(current_time)}.jpg")
                    cv2.imwrite(filename, display_frame)
                    logging.info(f"[{window_name}] L∆∞u ·∫£nh c·∫£nh b√°o: {filename}")
                    ok = send_alert_to_telegram(display_frame, telegram_token, chat_id)
                    logging.info(f"[{window_name}] send_alert_to_telegram returned: {ok}")
                    last_alert_time = current_time
            except Exception as e:
                logging.error(f"[{window_name}] L·ªói khi inference: {e}")
        # ‚Äî Ki·ªÉm tra ph√≠m: 'p' ƒë·ªÉ t·∫°m d·ª´ng, 'q' ƒë·ªÉ tho√°t
        key = cv2.waitKey(1) & 0xFF
        if key == ord('p'):
            paused = not paused
            if paused:
                freeze_frame = frame.copy()
        if key == ord('q'):
            logging.info(f"[{window_name}] Ng∆∞·ªùi d√πng nh·∫•n 'q'. Tho√°t lu·ªìng.")
            break
        if paused:
            pause_frame = (freeze_frame.copy()
                           if freeze_frame is not None else frame.copy())
            cv2.putText(pause_frame, "P to Pause - Q to Quit",
                        (10, 30), cv2.FONT_HERSHEY_SIMPLEX,
                        0.8, (0, 255, 255), 2)
            cv2.imshow(window_name, pause_frame)
            continue
        cv2.imshow(window_name, display_frame)
    cap.release()
    cv2.destroyWindow(window_name)
    logging.info(f"[{window_name}] ƒê√≥ng k·∫øt n·ªëi.")
# =================== H√ÄM MAIN ===================
def make_transparent(image_path, opacity=30):  # üÜï ƒê·ªô m·ªù 30% (c√≥ th·ªÉ ch·ªânh th·∫•p h∆°n)
    image = Image.open(image_path).convert("RGBA")  
    alpha = image.split()[3]  
    alpha = alpha.point(lambda p: int(p * opacity / 100))  
    image.putalpha(alpha)  
    return ImageTk.PhotoImage(image)

def select_parameters():
       # Ch·ªâ cho ph√©p ti·∫øn tr√¨nh ch√≠nh ch·∫°y giao di·ªán
    if current_process().name != "MainProcess":
        logging.error("Ti·∫øn tr√¨nh con kh√¥ng ƒë∆∞·ª£c ph√©p ch·∫°y giao di·ªán!")
        return {}  # NgƒÉn ti·∫øn tr√¨nh con m·ªü l·∫°i giao di·ªán
    # üÜï Kh·ªüi t·∫°o params ƒë√∫ng c√°ch
    params = {"telegram_token": "", "chat_id": "", "rtsp_links": [], "model_path": "", "alert_folder": "", "video_path": ""}

    root = tk.Tk()
    root.title("C·∫•u h√¨nh Camera & M√¥ h√¨nh")
    root.configure(bg="#f0f0f0")  # M√†u n·ªÅn c·ªßa c·ª≠a s·ªï
    root.geometry("800x600")  # Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc c·ª≠a s·ªï

    style = ttk.Style()
    style.theme_use("clam")

  # üÜï C√°c bi·∫øn ch·ª©a th√¥ng s·ªë c·ªßa giao di·ªán
    telegram_token_var = tk.StringVar()
    chat_id_var = tk.StringVar()
    rtsp_var1 = tk.StringVar()
    rtsp_var2 = tk.StringVar()
    rtsp_var3 = tk.StringVar()
    rtsp_var4 = tk.StringVar()
    model_path_var = tk.StringVar()
    alert_folder_var = tk.StringVar(value=os.path.join(os.getcwd(), "alert_images"))
    video_path_var = tk.StringVar()

     # üÜï H√†m ch·ªçn file m√¥ h√¨nh
    def browse_model():
        fp = filedialog.askopenfilename(title="Ch·ªçn file m√¥ h√¨nh (best.pt)", filetypes=[("PyTorch Model", "*.pt"), ("All files", "*.*")])
        if fp:
            model_path_var.set(fp)
    # üÜï H√†m ch·ªçn th∆∞ m·ª•c l∆∞u ·∫£nh c·∫£nh b√°o
    def browse_folder():
        folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c l∆∞u ·∫£nh c·∫£nh b√°o")
        if folder:
            alert_folder_var.set(folder)
    # üÜï H√†m ch·ªçn file video m·∫´u
    def browse_video():
        file_path = filedialog.askopenfilename(title="Ch·ªçn video m·∫´u", filetypes=[("Video Files", "*.mp4 *.avi *.mov")])
        if file_path:
            video_path_var.set(file_path)
    # üÜï ƒê·ªçc ·∫£nh logo v√† resize n·∫øu c·∫ßn
    image = Image.open("D:/nhan_dien_nguoi_la/logo.jpg").resize((400, 300))
    bg_image = ImageTk.PhotoImage(image)
# üÜï Hi·ªÉn th·ªã logo n·ªÅn v·ªõi ƒë·ªô trong su·ªët
    bg_image = make_transparent("D:/nhan_dien_nguoi_la/logo.jpg", opacity=30)
    bg_label = tk.Label(root, image=bg_image)
    bg_label.place(x=0, y=0, relwidth=1, relheight=1)  
    bg_label.lower()  # üÜï ƒê·∫£m b·∫£o logo kh√¥ng che ph·∫ßn nh·∫≠p li·ªáu
 # üÜï ƒê·∫∑t logo l√†m n·ªÅn b·∫±ng Label
    bg_label = tk.Label(root, image=bg_image)
    bg_label.place(x=0, y=0, relwidth=1, relheight=1)  # üÜï ƒê·∫∑t logo n·ªÅn ƒë√∫ng v·ªã tr√≠
    bg_label.lower()  # üÜï ƒê∆∞a logo xu·ªëng d∆∞·ªõi ƒë·ªÉ tr√°nh ch·∫∑n √¥ nh·∫≠p li·ªáu
  # üÜï Gi·ªØ ·∫£nh ƒë·ªÉ tr√°nh b·ªã xo√° (ƒê·∫∑t sau khi `bg_label` ƒë√£ kh·ªüi t·∫°o)
    bg_label.image = bg_image
     # üÜï T·∫°o canvas v√† ƒë·∫∑t ·∫£nh l√†m background
    canvas = tk.Canvas(root, width=800, height=600)
    canvas.place(x=0, y=0, width=800, height=600)
    canvas.create_image(400, 300, anchor="center", image=bg_image)
    canvas.image = bg_image 
     # üÜï Th√™m th√¥ng tin t√°c gi·∫£ ph·∫ßn m·ªÅm v√†o g√≥c b√™n ph·∫£i (b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh v·ªã tr√≠ x, y cho ph√π h·ª£p)
    tk.Label(root, 
         text="Ph√°t tri·ªÉn b·ªüi: C.P Vietnam Corporation \nSwine Veterinary and Biosecurity Department \n(B·ªô ph·∫≠n Th√∫ y v√† Ph√≤ng d·ªãch)", 
         bg="#f0f0f0", 
         fg="black", 
         font=("Helvetica", 10, "italic")).place(x=510, y=10)
    
    tk.Label(root, text="Telegram Token:", bg="#f0f0f0", fg="black").place(x=50, y=50)
    tk.Entry(root, textvariable=telegram_token_var, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=50)

    tk.Label(root, text="Telegram Chat ID:", bg="#f0f0f0", fg="black").place(x=50, y=100)
    tk.Entry(root, textvariable=chat_id_var, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=100)

    tk.Label(root, text="RTSP Link 1:", bg="#f0f0f0", fg="black").place(x=50, y=150)
    tk.Entry(root, textvariable=rtsp_var1, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=150)

    tk.Label(root, text="RTSP Link 2:", bg="#f0f0f0", fg="black").place(x=50, y=200)
    tk.Entry(root, textvariable=rtsp_var2, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=200)

    tk.Label(root, text="RTSP Link 3:", bg="#f0f0f0", fg="black").place(x=50, y=250)
    tk.Entry(root, textvariable=rtsp_var3, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=250)

    tk.Label(root, text="RTSP Link 4:", bg="#f0f0f0", fg="black").place(x=50, y=300)
    tk.Entry(root, textvariable=rtsp_var4, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=300)

    tk.Label(root, text="Model Path (best.pt):", bg="#f0f0f0", fg="black").place(x=50, y=350)
    tk.Entry(root, textvariable=model_path_var, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=350)
    tk.Button(root, text="Browse", command=browse_model, bg="#d3d3d3", fg="black", relief="raised", bd=3).place(x=510, y=348)

    tk.Label(root, text="Alert Image Folder:", bg="#f0f0f0", fg="black").place(x=50, y=400)
    tk.Entry(root, textvariable=alert_folder_var, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=400)
    tk.Button(root, text="Browse", command=browse_folder, bg="#d3d3d3", fg="black", relief="raised", bd=3).place(x=510, y=398)

    tk.Label(root, text="Video Test:", bg="#f0f0f0", fg="black").place(x=50, y=450)
    tk.Entry(root, textvariable=video_path_var, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=450)
    tk.Button(root, text="Browse", command=browse_video, bg="#d3d3d3", fg="black", relief="raised", bd=3).place(x=510, y=448)

    # N√∫t Start: L∆∞u c√°c th√¥ng tin v√† ƒë√≥ng c·ª≠a s·ªï
    def on_start():
        params["telegram_token"] = telegram_token_var.get()
        params["chat_id"] = chat_id_var.get()
        params["rtsp_links"] = [rtsp_var1.get(), rtsp_var2.get(), rtsp_var3.get(), rtsp_var4.get()]  # üÜï Th√™m RTSP Link 4
        params["model_path"] = model_path_var.get()
        params["alert_folder"] = alert_folder_var.get()
        params["video_path"] = video_path_var.get() if not any(params["rtsp_links"]) else None  # üÜï N·∫øu kh√¥ng c√≥ RTSP, d√πng video test
        root.destroy()
        run_camera(params)  # üÜï G·ªçi x·ª≠ l√Ω nh·∫≠n di·ªán ngay sau khi ch·ªçn xong

# V√≠ d·ª• s·ª≠ d·ª•ng ttk.Button thay cho tk.Button:
    ttk.Button(root, text="Start", command=on_start, style="TButton").place(x=250, y=500)
    root.mainloop()
    # Ki·ªÉm tra n·∫øu thi·∫øu Token ho·∫∑c Chat ID th√¨ b√°o l·ªói
    if not params["telegram_token"] or not params["chat_id"]:
        logging.error("L·ªói: Telegram Token ho·∫∑c Chat ID ch∆∞a nh·∫≠p!")
        return {}
    logging.info(f"D·ªØ li·ªáu ƒë√£ nh·∫≠p: {params}")
    return params

# =================== H√ÄM MAIN ===================
if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s [%(processName)s] %(levelname)s: %(message)s",
        datefmt="%H:%M:%S")
    # D√†nh cho vi·ªác ch·∫°y EXE tr√™n Windows v·ªõi multiprocessing
    freeze_support()
    try:
        set_start_method('spawn')
    except RuntimeError:
        pass
    # Ch·ªâ ti·∫øn tr√¨nh ch√≠nh m·ªõi th·ª±c hi·ªán c√°c b∆∞·ªõc d∆∞·ªõi ƒë√¢y
    if current_process().name != "MainProcess":
        exit()
    params = select_parameters()
    if not params or not params.get("rtsp_links"):
        logging.error("L·ªói: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ select_parameters()")
        exit()
    telegram_token = params.get("telegram_token")
    chat_id = params.get("chat_id")
    rtsp_links = params.get("rtsp_links", [])
    model_path = params.get("model_path", "")
    alert_folder = params.get("alert_folder", "")
    video_path = params.get("video_path")  # üÜï Th√™m video m·∫´u
    if not os.path.exists(model_path):
        logging.error("Thi·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o!")
        exit()
    logging.info("Ch∆∞∆°ng tr√¨nh b·∫Øt ƒë·∫ßu x·ª≠ l√Ω camera...")
    processes = []
    # üîπ N·∫øu c√≥ RTSP, ch·∫°y t·ª´ng camera
    if any(rtsp_links):
        for idx, rtsp_url in enumerate(rtsp_links, 1):
            window_name = f"Camera {idx+1}"
            p = Process(name=window_name, target=run_camera, args=(rtsp_url, window_name, model_path, alert_folder, PROCESSING_INTERVAL, telegram_token, chat_id))
            p.start()
            processes.append(p)
    else:
        # üîπ N·∫øu kh√¥ng c√≥ RTSP, ch·∫°y video m·∫´u
        window_name = "Demo Video"
        p = Process(target=run_camera, args=(None, window_name, model_path, alert_folder, PROCESSING_INTERVAL, telegram_token, chat_id, video_path))
        p.start()
        processes.append(p)

    for p in processes:
        p.join()