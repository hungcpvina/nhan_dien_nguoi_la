import cv2
import time
import os
import sys
import tkinter as tk
from tkinter import filedialog
import logging
from multiprocessing import Process, current_process, set_start_method, freeze_support
import requests
from ultralytics import YOLO

# =================== C·∫§U H√åNH CHUNG ===================

# C√°c l·ªõp ƒë·ªëi t∆∞·ª£ng c·∫ßn c·∫£nh b√°o
classes_to_alert = ["nguoi_la", "nguoi_do"]

# C√°c h·∫±ng s·ªë x·ª≠ l√Ω
MAX_RETRY = 5 
PROCESSING_INTERVAL = 3    # Ch·∫°y inference m·ªói 3 gi√¢y ƒë·ªÉ gi·∫£m t·∫£i
ALERT_INTERVAL = 60        # C√°ch nhau 60 gi√¢y gi·ªØa c√°c l·∫ßn c·∫£nh b√°o
REPEATED_ALERT_INTERVAL = 180  # 3 ph√∫t gi·ªØa c√°c l·∫ßn c·∫£nh b√°o c√πng m·ªôt ƒë·ªëi t∆∞·ª£ng
DISPLAY_WIDTH = 400        # C·ª≠a s·ªï video hi·ªÉn th·ªã c√≥ ƒë·ªô r·ªông c·ªë ƒë·ªãnh (kho·∫£ng 4 inch - v√≠ d·ª• 400 pixel)
DISPLAY_HEIGHT = 300       # Chi·ªÅu cao hi·ªÉn th·ªã (b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)
detected_objects = {}  # L∆∞u th√¥ng tin v·ªÅ c√°c ƒë·ªëi t∆∞·ª£ng ƒë√£ ph√°t hi·ªán
last_alert_time = {}

# =================== H√ÄM G·ª¨I C·∫¢NH B√ÅO QUA TELEGRAM ===================
def send_alert_to_telegram(image, object_id):
    try:
        current_time = time.time()
        alert_interval = 180  # 3 ph√∫t gi·ªØa c√°c l·∫ßn c·∫£nh b√°o c√πng m·ªôt ƒë·ªëi t∆∞·ª£ng

        # Ki·ªÉm tra n·∫øu ƒë·ªëi t∆∞·ª£ng ƒë√£ ƒë∆∞·ª£c c·∫£nh b√°o g·∫ßn ƒë√¢y
        if object_id in last_alert_time:
            if current_time - last_alert_time[object_id] < alert_interval:
                logging.info(f"ƒê·ªëi t∆∞·ª£ng {object_id} ƒë√£ ƒë∆∞·ª£c c·∫£nh b√°o g·∫ßn ƒë√¢y. Ch·ªù {alert_interval} gi√¢y tr∆∞·ªõc khi g·ª≠i l·∫°i.")
                return False  # Kh√¥ng g·ª≠i c·∫£nh b√°o ngay

        _, img_encoded = cv2.imencode('.jpg', image)
        files = {'photo': ('alert.jpg', img_encoded.tobytes(), 'image/jpeg')}
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto"
        data = {'chat_id': CHAT_ID, 'caption': '‚ö†Ô∏è C·∫£nh b√°o ! Ph√°t hi·ªán ng∆∞·ªùi l·∫°! ‚ö†Ô∏è'}
        response = requests.post(url, files=files, data=data, timeout=10)

        if response.ok:
            logging.info("ƒê√£ g·ª≠i c·∫£nh b√°o qua Telegram th√†nh c√¥ng.")
            last_alert_time[object_id] = current_time  # C·∫≠p nh·∫≠t th·ªùi gian c·∫£nh b√°o cho ƒë·ªëi t∆∞·ª£ng
            return True
        else:
            logging.warning(f"Telegram tr·∫£ v·ªÅ l·ªói: {response.text}")
            return False
    except Exception as e:
        logging.error(f"L·ªói khi g·ª≠i c·∫£nh b√°o Telegram: {e}")
        return False

# =================== H√ÄM GIAO DI·ªÜN CH·ªåN THAM S·ªê (Tkinter GUI) ===================
def select_parameters():
    params = {}
    root = tk.Tk()
    root.title("C·∫•u h√¨nh Camera & M√¥ h√¨nh")

     # C√°c bi·∫øn ch·ª©a th√¥ng s·ªë c·ªßa giao di·ªán
    telegram_token_var = tk.StringVar()
    chat_id_var = tk.StringVar()
    rtsp_var1 = tk.StringVar()
    rtsp_var2 = tk.StringVar()
    rtsp_var3 = tk.StringVar()
    rtsp_var4 = tk.StringVar() #Th√™m tr∆∞·ªùng nh·∫≠p link rtsp 4
    model_path_var = tk.StringVar()
    alert_folder_var = tk.StringVar(value=os.path.join(os.getcwd(), "alert_images"))
    video_path_var = tk.StringVar()  # üÜï Th√™m bi·∫øn ch·ª©a ƒë∆∞·ªùng d·∫´n video m·∫´u
    # H√†m ch·ªçn file m√¥ h√¨nh
    def browse_model():
        fp = filedialog.askopenfilename(
            title="Ch·ªçn file m√¥ h√¨nh (best.pt)",
            filetypes=[("PyTorch Model", "*.pt"), ("All files", "*.*")]
        )
        if fp:
            model_path_var.set(fp)

    # H√†m ch·ªçn th∆∞ m·ª•c l∆∞u ·∫£nh c·∫£nh b√°o
    def browse_folder():
        folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c l∆∞u ·∫£nh c·∫£nh b√°o")
        if folder:
            alert_folder_var.set(folder)

    # H√†m ch·ªçn file video m·∫´u
    def browse_video():
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn video m·∫´u",
            filetypes=[("Video Files", "*.mp4 *.avi *.mov")]
        )
        if file_path:
            video_path_var.set(file_path)

    # Giao di·ªán nh·∫≠p Telegram Token
    tk.Label(root, text="Telegram Token:").grid(row=0, column=0, sticky="w", padx=5, pady=5)
    tk.Entry(root, textvariable=telegram_token_var, width=60).grid(row=0, column=1, padx=5, pady=5)

    # Giao di·ªán nh·∫≠p Telegram Chat ID
    tk.Label(root, text="Telegram Chat ID:").grid(row=1, column=0, sticky="w", padx=5, pady=5)
    tk.Entry(root, textvariable=chat_id_var, width=60).grid(row=1, column=1, padx=5, pady=5)

    # Giao di·ªán nh·∫≠p 3 RTSP link
    tk.Label(root, text="RTSP Link 1:").grid(row=2, column=0, sticky="w", padx=5, pady=5)
    tk.Entry(root, textvariable=rtsp_var1, width=60).grid(row=2, column=1, padx=5, pady=5)

    tk.Label(root, text="RTSP Link 2:").grid(row=3, column=0, sticky="w", padx=5, pady=5)
    tk.Entry(root, textvariable=rtsp_var2, width=60).grid(row=3, column=1, padx=5, pady=5)

    tk.Label(root, text="RTSP Link 3:").grid(row=4, column=0, sticky="w", padx=5, pady=5)
    tk.Entry(root, textvariable=rtsp_var3, width=60).grid(row=4, column=1, padx=5, pady=5)

        # Giao di·ªán nh·∫≠p RTSP Link 4
    tk.Label(root, text="RTSP Link 4:").grid(row=5, column=0, sticky="w", padx=5, pady=5)
    tk.Entry(root, textvariable=rtsp_var4, width=60).grid(row=5, column=1, padx=5, pady=5)


        # Nh·∫≠p ƒë∆∞·ªùng d·∫´n file m√¥ h√¨nh best.pt
    tk.Label(root, text="Model Path (best.pt):").grid(row=6, column=0, sticky="w", padx=5, pady=5)
    tk.Entry(root, textvariable=model_path_var, width=60).grid(row=6, column=1, padx=5, pady=5)
    tk.Button(root, text="Browse", command=browse_model).grid(row=6, column=2, padx=5, pady=5)

    # Nh·∫≠p th∆∞ m·ª•c l∆∞u ·∫£nh c·∫£nh b√°o
    tk.Label(root, text="Alert Image Folder:").grid(row=7, column=0, sticky="w", padx=5, pady=5)
    tk.Entry(root, textvariable=alert_folder_var, width=60).grid(row=7, column=1, padx=5, pady=5)
    tk.Button(root, text="Browse", command=browse_folder).grid(row=7, column=2, padx=5, pady=5)

    # üÜï Nh·∫≠p ƒë∆∞·ªùng d·∫´n video m·∫´u (s·ª≠a b·ªë tr√≠ ƒë·ªÉ kh√¥ng b·ªã ƒë√®)
    tk.Label(root, text="Video Test (n·∫øu kh√¥ng c√≥ RTSP):").grid(row=8, column=0, sticky="w", padx=5, pady=10)
    tk.Entry(root, textvariable=video_path_var, width=60).grid(row=8, column=1, padx=5, pady=10)
    tk.Button(root, text="Browse", command=lambda: video_path_var.set(filedialog.askopenfilename(title="Ch·ªçn video m·∫´u", filetypes=[("Video Files", "*.mp4 *.avi *.mov")]))).grid(row=8, column=2, padx=5, pady=10)

       # üÜï N√∫t Start: Ki·ªÉm tra RTSP, n·∫øu tr·ªëng th√¨ d√πng video m·∫´u
    def on_start():
        params["telegram_token"] = telegram_token_var.get()
        params["chat_id"] = chat_id_var.get()
        params["rtsp_links"] = [rtsp_var1.get(), rtsp_var2.get(), rtsp_var3.get()]
        params["model_path"] = model_path_var.get()
        params["alert_folder"] = alert_folder_var.get()
        params["video_path"] = video_path_var.get() if not any(params["rtsp_links"]) else None
        
        root.destroy()
        run_camera(params)  # üÜï G·ªçi x·ª≠ l√Ω nh·∫≠n di·ªán ngay sau khi ch·ªçn xong

    tk.Button(root, text="Start", command=on_start, width=20).grid(row=9, column=1, pady=10)

    root.mainloop()

    # Ki·ªÉm tra n·∫øu thi·∫øu Token ho·∫∑c Chat ID th√¨ kh√¥ng ch·∫°y ti·∫øp
    if not params["telegram_token"] or not params["chat_id"]:
        logging.error("L·ªói: Telegram Token ho·∫∑c Chat ID ch∆∞a nh·∫≠p!")
        return {}

    return params

# =================== H√ÄM X·ª¨ L√ù CAMERA (Ch·∫°y trong ti·∫øn tr√¨nh ri√™ng, kh√¥ng c√≥ GUI) ===================
def send_alert_to_telegram(image, telegram_token, chat_id):
    if not telegram_token or not chat_id:
        logging.error("L·ªói: Telegram Token ho·∫∑c Chat ID ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!")
        return False

    try:
        _, img_encoded = cv2.imencode('.jpg', image)
        files = {'photo': ('alert.jpg', img_encoded.tobytes(), 'image/jpeg')}
        url = f"https://api.telegram.org/bot{telegram_token}/sendPhoto"
        data = {'chat_id': chat_id, 'caption': '‚ö†Ô∏è C·∫£nh b√°o ! Ph√°t hi·ªán ng∆∞·ªùi l·∫°! ‚ö†Ô∏è'}
        response = requests.post(url, files=files, data=data, timeout=10)

        if response.ok:
            logging.info("ƒê√£ g·ª≠i c·∫£nh b√°o qua Telegram th√†nh c√¥ng.")
            return True
        else:
            logging.warning(f"Telegram tr·∫£ v·ªÅ l·ªói: {response.text}")
            return False

    except Exception as e:
        logging.error(f"L·ªói khi g·ª≠i c·∫£nh b√°o Telegram: {e}")
        return False
def run_camera(rtsp_url, window_name, model_path, alert_folder, processing_interval, telegram_token, chat_id, video_path=None):
    logging.info(f"[{window_name}] Kh·ªüi ƒë·ªông...")

    try:
        model = YOLO(model_path)
        logging.info(f"[{window_name}] M√¥ h√¨nh ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!")
    except Exception as e:
        logging.error(f"[{window_name}] L·ªói t·∫£i m√¥ h√¨nh: {e}")
        return

    retry_count = 0
    cap = None

    # üîπ Ki·ªÉm tra n·∫øu RTSP tr·ªëng th√¨ d√πng video m·∫´u
    if rtsp_url:
        logging.info(f"[{window_name}] ƒêang k·∫øt n·ªëi RTSP: {rtsp_url}")
        while retry_count < MAX_RETRY:
            cap = cv2.VideoCapture(rtsp_url, cv2.CAP_FFMPEG)
            cap.set(cv2.CAP_PROP_FPS, 30)
            cap.set(cv2.CAP_PROP_BUFFERSIZE, 0)
            cap.set(cv2.CAP_PROP_POS_FRAMES, cap.get(cv2.CAP_PROP_FRAME_COUNT) - 1)
            
            if cap.isOpened():
                logging.info(f"[{window_name}] K·∫øt n·ªëi RTSP th√†nh c√¥ng!")
                actual_fps = cap.get(cv2.CAP_PROP_FPS)
                logging.info(f"[{window_name}] FPS th·ª±c t·∫ø c·ªßa lu·ªìng: {actual_fps}")
                break
            else:
                logging.warning(f"[{window_name}] L·ªói m·ªü RTSP! ƒêang th·ª≠ l·∫°i ({retry_count+1}/{MAX_RETRY})...")
                cap.release()
                time.sleep(3)
                retry_count += 1
    else:
        logging.info(f"[{window_name}] ƒêang ch·∫°y demo v·ªõi video m·∫´u: {video_path}")
        cap = cv2.VideoCapture(video_path)

    if not cap or not cap.isOpened():
        logging.error(f"[{window_name}] Kh√¥ng th·ªÉ m·ªü ngu·ªìn video sau {MAX_RETRY} l·∫ßn th·ª≠!")
        return

    paused = False
    last_inference = 0
    last_alert_time = 0

    cv2.namedWindow(window_name, cv2.WINDOW_NORMAL)
    cv2.resizeWindow(window_name, DISPLAY_WIDTH, DISPLAY_HEIGHT)

    while True:
        time.sleep(0.1)
       # üîπ B·ªè qua khung h√¨nh c≈© ƒë·ªÉ l·∫•y khung h√¨nh m·ªõi nh·∫•t
        cap.grab()
        ret, frame = cap.retrieve()

        if not ret:
            if rtsp_url:
                logging.warning(f"[{window_name}] M·∫•t k·∫øt n·ªëi RTSP, ƒëang th·ª≠ l·∫°i...")
                cap.release()
                time.sleep(3)
                retry_count = 0
                while retry_count < MAX_RETRY:
                    cap = cv2.VideoCapture(rtsp_url)
                    if cap.isOpened():
                        logging.info(f"[{window_name}] K·∫øt n·ªëi RTSP th√†nh c√¥ng!")
                        break
                    else:
                        logging.warning(f"[{window_name}] L·ªói m·ªü RTSP! ƒêang th·ª≠ l·∫°i ({retry_count+1}/{MAX_RETRY})...")
                        cap.release()
                        time.sleep(3)
                        retry_count += 1
                if not cap or not cap.isOpened():
                    logging.error(f"[{window_name}] Kh√¥ng th·ªÉ k·∫øt n·ªëi l·∫°i RTSP sau {MAX_RETRY} l·∫ßn th·ª≠!")
                    break
                continue
            else:
                logging.error(f"[{window_name}] Video m·∫´u k·∫øt th√∫c!")
                break

        # üîπ Gi·ªØ nguy√™n ph·∫ßn ch·∫°y inference m·ªói v√†i gi√¢y ƒë·ªÉ gi·∫£m t·∫£i
        current_time = time.time()
        display_frame = frame.copy()

        if current_time - last_inference >= processing_interval:
            last_inference = current_time
            try:
                results = model(display_frame)[0]
                alert_detected = False
                for box in results.boxes:
                    cls_id = int(box.cls[0])
                    conf = float(box.conf[0])
                    class_name = model.names.get(cls_id, "unknown") if isinstance(model.names, dict) else model.names[cls_id]
                    if class_name in classes_to_alert:
                        alert_detected = True
                        x1, y1, x2, y2 = map(int, box.xyxy[0])
                        cv2.rectangle(display_frame, (x1, y1), (x2, y2), (0, 0, 255), 2)
                        cv2.putText(display_frame, f"{class_name} {conf:.2f}",
                                    (x1, max(y1 - 10, 10)), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                    if alert_detected and (current_time - last_alert_time >= ALERT_INTERVAL):
                        filename = os.path.join(alert_folder, f"alert_{int(current_time)}.jpg")
                        cv2.imwrite(filename, display_frame)
                        logging.info(f"[{window_name}] L∆∞u ·∫£nh c·∫£nh b√°o: {filename}")
                        if send_alert_to_telegram(display_frame, telegram_token, chat_id):
                            logging.info(f"[{window_name}] ƒê√£ g·ª≠i c·∫£nh b√°o qua Telegram.")
                        last_alert_time = current_time

            except Exception as e:
                logging.error(f"[{window_name}] L·ªói khi inference: {e}")
# Ki·ªÉm tra ph√≠m: 'p' ƒë·ªÉ t·∫°m d·ª´ng, 'q' ƒë·ªÉ tho√°t
        key = cv2.waitKey(1) & 0xFF
        if key == ord('p'):
            paused = not paused
        if key == ord('q'):
            logging.info(f"[{window_name}] Ng∆∞·ªùi d√πng nh·∫•n 'q'. Tho√°t lu·ªìng.")
            break

        if paused:
            pause_frame = frame.copy()
            cv2.putText(pause_frame, "T·∫†M D·ª™NG - Nh·∫•n 'p' ƒë·ªÉ ti·∫øp t·ª•c", (10, 30),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 255), 2)
            cv2.imshow(window_name, pause_frame)
            continue
    cap.release()
    cv2.destroyWindow(window_name)
    logging.info(f"[{window_name}] ƒê√≥ng k·∫øt n·ªëi.")



# =================== H√ÄM MAIN ===================
def select_parameters():
    # Ch·ªâ cho ph√©p ti·∫øn tr√¨nh ch√≠nh ch·∫°y giao di·ªán
    if current_process().name != "MainProcess":
        logging.error("Ti·∫øn tr√¨nh con kh√¥ng ƒë∆∞·ª£c ph√©p ch·∫°y giao di·ªán!")
        return {}  # NgƒÉn ti·∫øn tr√¨nh con m·ªü l·∫°i giao di·ªán

    params = {
        "rtsp_links": [],
        "model_path": "",
        "alert_folder": "",
        "telegram_token": "",
        "chat_id": "",
        "video_path": ""  # üÜï Th√™m bi·∫øn ch·ª©a ƒë∆∞·ªùng d·∫´n video m·∫´u
    }

    root = tk.Tk()
    root.title("C·∫•u h√¨nh Camera & M√¥ h√¨nh")

    # Nh·∫≠p Telegram Token
    tk.Label(root, text="Telegram Token:").grid(row=0, column=0, sticky="w", padx=5, pady=5)
    telegram_token_var = tk.StringVar()
    tk.Entry(root, textvariable=telegram_token_var, width=60).grid(row=0, column=1, padx=5, pady=5)

    # Nh·∫≠p Telegram Chat ID
    tk.Label(root, text="Telegram Chat ID:").grid(row=1, column=0, sticky="w", padx=5, pady=5)
    chat_id_var = tk.StringVar()
    tk.Entry(root, textvariable=chat_id_var, width=60).grid(row=1, column=1, padx=5, pady=5)

    # Nh·∫≠p RTSP Link 1
    tk.Label(root, text="RTSP Link 1:").grid(row=2, column=0, sticky="w", padx=5, pady=5)
    rtsp_var1 = tk.StringVar(value="rtsp://admin:pa123456@camera1_url?rtsp_transport=tcp")
    tk.Entry(root, textvariable=rtsp_var1, width=60).grid(row=2, column=1, padx=5, pady=5)

    tk.Label(root, text="RTSP Link 2:").grid(row=3, column=0, sticky="w", padx=5, pady=5)
    rtsp_var2 = tk.StringVar(value="rtsp://admin:pa123456@camera2_url?rtsp_transport=tcp")
    tk.Entry(root, textvariable=rtsp_var2, width=60).grid(row=3, column=1, padx=5, pady=5)

    tk.Label(root, text="RTSP Link 3:").grid(row=4, column=0, sticky="w", padx=5, pady=5)
    rtsp_var3 = tk.StringVar(value="rtsp://admin:pa123456@camera3_url?rtsp_transport=tcp")
    tk.Entry(root, textvariable=rtsp_var3, width=60).grid(row=4, column=1, padx=5, pady=5)

        # Nh·∫≠p RTSP Link 4
    tk.Label(root, text="RTSP Link 4:").grid(row=5, column=0, sticky="w", padx=5, pady=5)
    rtsp_var4 = tk.StringVar(value="rtsp://admin:pa123456@camera4_url?rtsp_transport=tcp")
    tk.Entry(root, textvariable=rtsp_var4, width=60).grid(row=5, column=1, padx=5, pady=5)

    # Nh·∫≠p ƒë∆∞·ªùng d·∫´n file m√¥ h√¨nh best.pt
    tk.Label(root, text="Model Path (best.pt):").grid(row=6, column=0, sticky="w", padx=5, pady=5)
    model_path_var = tk.StringVar()
    tk.Entry(root, textvariable=model_path_var, width=60).grid(row=6, column=1, padx=5, pady=5)
    tk.Button(root, text="Browse", command=lambda: model_path_var.set(filedialog.askopenfilename())).grid(row=6, column=2, padx=5, pady=5)

    # Nh·∫≠p th∆∞ m·ª•c ·∫£nh c·∫£nh b√°o
    tk.Label(root, text="Alert Image Folder:").grid(row=7, column=0, sticky="w", padx=5, pady=5)
    alert_folder_var = tk.StringVar(value=os.path.join(os.getcwd(), "alert_images"))
    tk.Entry(root, textvariable=alert_folder_var, width=60).grid(row=7, column=1, padx=5, pady=5)
    tk.Button(root, text="Browse", command=lambda: alert_folder_var.set(filedialog.askdirectory())).grid(row=7, column=2, padx=5, pady=5)

    # üÜï Nh·∫≠p ƒë∆∞·ªùng d·∫´n video m·∫´u
    tk.Label(root, text="Video Test (n·∫øu kh√¥ng c√≥ RTSP):").grid(row=8, column=0, sticky="w", padx=5, pady=5)
    video_path_var = tk.StringVar()
    tk.Entry(root, textvariable=video_path_var, width=60).grid(row=8, column=1, padx=5, pady=5)
    tk.Button(root, text="Browse", command=lambda: video_path_var.set(filedialog.askopenfilename(title="Ch·ªçn video m·∫´u", filetypes=[("Video Files", "*.mp4 *.avi *.mov")]))).grid(row=8, column=2, padx=5, pady=5)

    # N√∫t Start: L∆∞u c√°c th√¥ng tin v√† ƒë√≥ng c·ª≠a s·ªï
    def on_start():
        params["telegram_token"] = telegram_token_var.get()
        params["chat_id"] = chat_id_var.get()
        params["rtsp_links"] = [rtsp_var1.get(), rtsp_var2.get(), rtsp_var3.get(), rtsp_var4.get()]  # üÜï Th√™m RTSP Link 4
        params["model_path"] = model_path_var.get()
        params["alert_folder"] = alert_folder_var.get()
        params["video_path"] = video_path_var.get() if not any(params["rtsp_links"]) else None  # üÜï N·∫øu kh√¥ng c√≥ RTSP, d√πng video test
        
        root.destroy()
        run_camera(params)  # üÜï G·ªçi x·ª≠ l√Ω nh·∫≠n di·ªán ngay sau khi ch·ªçn xong

    tk.Button(root, text="Start", command=on_start, width=20).grid(row=9, column=1, pady=15)

    root.mainloop()

    # Ki·ªÉm tra n·∫øu thi·∫øu Token ho·∫∑c Chat ID th√¨ b√°o l·ªói
    if not params["telegram_token"] or not params["chat_id"]:
        logging.error("L·ªói: Telegram Token ho·∫∑c Chat ID ch∆∞a nh·∫≠p!")
        return {}

    logging.info(f"D·ªØ li·ªáu ƒë√£ nh·∫≠p: {params}")
    return params
# =================== H√ÄM MAIN ===================
if __name__ == "__main__":
    # D√†nh cho vi·ªác ch·∫°y EXE tr√™n Windows v·ªõi multiprocessing
    freeze_support()
    try:
        set_start_method('spawn')
    except RuntimeError:
        pass

    # Ch·ªâ ti·∫øn tr√¨nh ch√≠nh m·ªõi th·ª±c hi·ªán c√°c b∆∞·ªõc d∆∞·ªõi ƒë√¢y
    if current_process().name != "MainProcess":
        exit()

    params = select_parameters()
    if not params or not params.get("rtsp_links"):
        logging.error("L·ªói: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ select_parameters()")
        exit()
    telegram_token = params.get("telegram_token")
    chat_id = params.get("chat_id")
    rtsp_links = params.get("rtsp_links", [])
    model_path = params.get("model_path", "")
    alert_folder = params.get("alert_folder", "")
    video_path = params.get("video_path")  # üÜï Th√™m video m·∫´u

    if not os.path.exists(model_path):
        logging.error("Thi·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o!")
        exit()

    logging.info("Ch∆∞∆°ng tr√¨nh b·∫Øt ƒë·∫ßu x·ª≠ l√Ω camera...")

    processes = []
    # üîπ N·∫øu c√≥ RTSP, ch·∫°y t·ª´ng camera
    if any(rtsp_links):
        for idx, rtsp_url in enumerate(rtsp_links):
            window_name = f"Camera {idx+1}"
            p = Process(target=run_camera, args=(rtsp_url, window_name, model_path, alert_folder, PROCESSING_INTERVAL, telegram_token, chat_id))
            p.start()
            processes.append(p)
    else:
        # üîπ N·∫øu kh√¥ng c√≥ RTSP, ch·∫°y video m·∫´u
        window_name = "Demo Video"
        p = Process(target=run_camera, args=(None, window_name, model_path, alert_folder, PROCESSING_INTERVAL, telegram_token, chat_id, video_path))
        p.start()
        processes.append(p)

    for p in processes:
        p.join()