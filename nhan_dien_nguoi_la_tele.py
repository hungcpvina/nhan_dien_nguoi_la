import cv2
import time
import os
import sys
from PIL import Image, ImageTk
from PIL import ImageFilter
import tkinter as tk
from tkinter import filedialog
import logging
from multiprocessing import Process, current_process, set_start_method, freeze_support
import requests
from ultralytics import YOLO

# =================== C·∫§U H√åNH CHUNG ===================

# C√°c l·ªõp ƒë·ªëi t∆∞·ª£ng c·∫ßn c·∫£nh b√°o
classes_to_alert = ["nguoi_la", "nguoi_do"]

# C√°c h·∫±ng s·ªë x·ª≠ l√Ω
MAX_RETRY = 5 
PROCESSING_INTERVAL = 3    # Ch·∫°y inference m·ªói 3 gi√¢y ƒë·ªÉ gi·∫£m t·∫£i
ALERT_INTERVAL = 60        # C√°ch nhau 60 gi√¢y gi·ªØa c√°c l·∫ßn c·∫£nh b√°o
REPEATED_ALERT_INTERVAL = 180  # 10 ph√∫t gi·ªØa c√°c l·∫ßn c·∫£nh b√°o c√πng m·ªôt ƒë·ªëi t∆∞·ª£ng
DISPLAY_WIDTH = 400        # C·ª≠a s·ªï video hi·ªÉn th·ªã c√≥ ƒë·ªô r·ªông c·ªë ƒë·ªãnh (kho·∫£ng 4 inch - v√≠ d·ª• 400 pixel)
DISPLAY_HEIGHT = 300       # Chi·ªÅu cao hi·ªÉn th·ªã (b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)
detected_objects = {}  # L∆∞u th√¥ng tin v·ªÅ c√°c ƒë·ªëi t∆∞·ª£ng ƒë√£ ph√°t hi·ªán
last_alert_time = {}

# =================== H√ÄM G·ª¨I C·∫¢NH B√ÅO QUA TELEGRAM ===================
def send_alert_to_telegram(image, object_id):
    try:
        current_time = time.time()
        alert_interval = 180  # 3 ph√∫t gi·ªØa c√°c l·∫ßn c·∫£nh b√°o c√πng m·ªôt ƒë·ªëi t∆∞·ª£ng

        # Ki·ªÉm tra n·∫øu ƒë·ªëi t∆∞·ª£ng ƒë√£ ƒë∆∞·ª£c c·∫£nh b√°o g·∫ßn ƒë√¢y
        if object_id in last_alert_time:
            if current_time - last_alert_time[object_id] < alert_interval:
                logging.info(f"ƒê·ªëi t∆∞·ª£ng {object_id} ƒë√£ ƒë∆∞·ª£c c·∫£nh b√°o g·∫ßn ƒë√¢y. Ch·ªù {alert_interval} gi√¢y tr∆∞·ªõc khi g·ª≠i l·∫°i.")
                return False  # Kh√¥ng g·ª≠i c·∫£nh b√°o ngay

        _, img_encoded = cv2.imencode('.jpg', image)
        files = {'photo': ('alert.jpg', img_encoded.tobytes(), 'image/jpeg')}
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto"
        data = {'chat_id': CHAT_ID, 'caption': '‚ö†Ô∏è C·∫£nh b√°o ! Ph√°t hi·ªán ng∆∞·ªùi l·∫°! ‚ö†Ô∏è'}
        response = requests.post(url, files=files, data=data, timeout=10)

        if response.ok:
            logging.info("ƒê√£ g·ª≠i c·∫£nh b√°o qua Telegram th√†nh c√¥ng.")
            last_alert_time[object_id] = current_time  # C·∫≠p nh·∫≠t th·ªùi gian c·∫£nh b√°o cho ƒë·ªëi t∆∞·ª£ng
            return True
        else:
            logging.warning(f"Telegram tr·∫£ v·ªÅ l·ªói: {response.text}")
            return False
    except Exception as e:
        logging.error(f"L·ªói khi g·ª≠i c·∫£nh b√°o Telegram: {e}")
        return False

# =================== H√ÄM GIAO DI·ªÜN CH·ªåN THAM S·ªê (Tkinter GUI) ===================
def make_transparent(image_path, opacity=30):  # üÜï ƒê·ªô m·ªù 30% (c√≥ th·ªÉ ch·ªânh th·∫•p h∆°n)
    image = Image.open(image_path).convert("RGBA")  
    alpha = image.split()[3]  
    alpha = alpha.point(lambda p: int(p * opacity / 100))  
    image.putalpha(alpha)  
    return ImageTk.PhotoImage(image)

def select_parameters():
    # üÜï Kh·ªüi t·∫°o params ƒë√∫ng c√°ch
    params = {"telegram_token": "", "chat_id": "", "rtsp_links": [], "model_path": "", "alert_folder": "", "video_path": ""}

    root = tk.Tk()
    root.title("C·∫•u h√¨nh Camera & M√¥ h√¨nh")
    root.geometry("800x600")

     # üÜï C√°c bi·∫øn ch·ª©a th√¥ng s·ªë c·ªßa giao di·ªán
    telegram_token_var = tk.StringVar()
    chat_id_var = tk.StringVar()
    rtsp_var1 = tk.StringVar()
    rtsp_var2 = tk.StringVar()
    rtsp_var3 = tk.StringVar()
    rtsp_var4 = tk.StringVar()
    model_path_var = tk.StringVar()
    alert_folder_var = tk.StringVar()
    video_path_var = tk.StringVar()

# üÜï H√†m ch·ªçn file m√¥ h√¨nh
    def browse_model():
        fp = filedialog.askopenfilename(title="Ch·ªçn file m√¥ h√¨nh (best.pt)", filetypes=[("PyTorch Model", "*.pt"), ("All files", "*.*")])
        if fp:
            model_path_var.set(fp)

    # üÜï H√†m ch·ªçn th∆∞ m·ª•c l∆∞u ·∫£nh c·∫£nh b√°o
    def browse_folder():
        folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c l∆∞u ·∫£nh c·∫£nh b√°o")
        if folder:
            alert_folder_var.set(folder)

    # üÜï H√†m ch·ªçn file video m·∫´u
    def browse_video():
        file_path = filedialog.askopenfilename(title="Ch·ªçn video m·∫´u", filetypes=[("Video Files", "*.mp4 *.avi *.mov")])
        if file_path:
            video_path_var.set(file_path)


      # üÜï Hi·ªÉn th·ªã logo n·ªÅn v·ªõi ƒë·ªô trong su·ªët
    bg_image = make_transparent("D:/nhan_dien_nguoi_la/logo.jpg", opacity=30)

    # üÜï ƒê·∫∑t logo l√†m n·ªÅn b·∫±ng Label
    bg_label = tk.Label(root, image=bg_image)
    bg_label.place(x=0, y=0, relwidth=1, relheight=1)  
    bg_label.lower()  # üÜï ƒê·∫£m b·∫£o logo kh√¥ng che ph·∫ßn nh·∫≠p li·ªáu

# üÜï Gi·ªØ ·∫£nh ƒë·ªÉ tr√°nh b·ªã xo√° (ƒê·∫∑t sau khi `bg_label` ƒë√£ kh·ªüi t·∫°o)
    bg_label.image = bg_image

     # üÜï T·∫°o canvas ƒë·ªÉ ƒë·∫∑t ·∫£nh n·ªÅn ph√≠a d∆∞·ªõi
    canvas = tk.Canvas(root, width=800, height=600)
    canvas.place(x=0, y=0, width=800, height=600)
    canvas.create_image(400, 300, anchor="center", image=bg_image)  
    canvas.image = bg_image 
   
   # üÜï ƒê·∫∑t c√°c th√†nh ph·∫ßn giao di·ªán
    tk.Label(root, text="Telegram Token:", bg="#f0f0f0").place(x=50, y=50)
    tk.Entry(root, textvariable=telegram_token_var, width=50).place(x=200, y=50)

    tk.Label(root, text="Telegram Chat ID:").place(x=50, y=100)
    tk.Entry(root, textvariable=chat_id_var, width=50).place(x=200, y=100)

    tk.Label(root, text="RTSP Link 1:").place(x=50, y=150)
    tk.Entry(root, textvariable=rtsp_var1, width=50).place(x=200, y=150)

    tk.Label(root, text="RTSP Link 2:").place(x=50, y=200)
    tk.Entry(root, textvariable=rtsp_var2, width=50).place(x=200, y=200)

    tk.Label(root, text="RTSP Link 3:").place(x=50, y=250)
    tk.Entry(root, textvariable=rtsp_var3, width=50).place(x=200, y=250)

    tk.Label(root, text="RTSP Link 4:").place(x=50, y=300)
    tk.Entry(root, textvariable=rtsp_var4, width=50).place(x=200, y=300)

    tk.Label(root, text="Model Path (best.pt):").place(x=50, y=350)
    tk.Entry(root, textvariable=model_path_var, width=50).place(x=200, y=350)
    tk.Button(root, text="Browse", command=browse_model).place(x=510, y=348)  # üÜï D·ªãch n√∫t sang ph·∫£i

    tk.Label(root, text="Alert Image Folder:").place(x=50, y=400)
    tk.Entry(root, textvariable=alert_folder_var, width=50).place(x=200, y=400)
    tk.Button(root, text="Browse", command=browse_folder).place(x=510, y=398)  # üÜï D·ªãch n√∫t sang ph·∫£i

    tk.Label(root, text="Video Test:").place(x=50, y=450)
    tk.Entry(root, textvariable=video_path_var, width=50).place(x=200, y=450)
    tk.Button(root, text="Browse", command=browse_video).place(x=510, y=448)  # üÜï D·ªãch n√∫t sang ph·∫£i

    # üÜï N√∫t Start
    def on_start():
        params["telegram_token"] = telegram_token_var.get()
        params["chat_id"] = chat_id_var.get()
        params["rtsp_links"] = [rtsp_var1.get(), rtsp_var2.get(), rtsp_var3.get(), rtsp_var4.get()]
        params["model_path"] = model_path_var.get()
        params["alert_folder"] = alert_folder_var.get()
        params["video_path"] = video_path_var.get() if not any(params["rtsp_links"]) else None
        root.destroy()
        run_camera(params)


    # üÜï C·∫≠p nh·∫≠t giao di·ªán b·∫±ng `place()`
    tk.Button(root, text="Start", command=on_start, width=20).place(x=250, y=500)


    root.mainloop()

    # Ki·ªÉm tra n·∫øu thi·∫øu Token ho·∫∑c Chat ID th√¨ kh√¥ng ch·∫°y ti·∫øp
    if not params["telegram_token"] or not params["chat_id"]:
        logging.error("L·ªói: Telegram Token ho·∫∑c Chat ID ch∆∞a nh·∫≠p!")
        return {}

    return params

# =================== H√ÄM X·ª¨ L√ù CAMERA (Ch·∫°y trong ti·∫øn tr√¨nh ri√™ng, kh√¥ng c√≥ GUI) ===================
def send_alert_to_telegram(image, telegram_token, chat_id):
    if not telegram_token or not chat_id:
        logging.error("L·ªói: Telegram Token ho·∫∑c Chat ID ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!")
        return False

    try:
        _, img_encoded = cv2.imencode('.jpg', image)
        files = {'photo': ('alert.jpg', img_encoded.tobytes(), 'image/jpeg')}
        url = f"https://api.telegram.org/bot{telegram_token}/sendPhoto"
        data = {'chat_id': chat_id, 'caption': '‚ö†Ô∏è C·∫£nh b√°o ! Ph√°t hi·ªán ng∆∞·ªùi l·∫°! ‚ö†Ô∏è'}
        response = requests.post(url, files=files, data=data, timeout=10)

        if response.ok:
            logging.info("ƒê√£ g·ª≠i c·∫£nh b√°o qua Telegram th√†nh c√¥ng.")
            return True
        else:
            logging.warning(f"Telegram tr·∫£ v·ªÅ l·ªói: {response.text}")
            return False

    except Exception as e:
        logging.error(f"L·ªói khi g·ª≠i c·∫£nh b√°o Telegram: {e}")
        return False
def run_camera(rtsp_url, window_name, model_path, alert_folder, processing_interval, telegram_token, chat_id, video_path=None):
    logging.info(f"[{window_name}] Kh·ªüi ƒë·ªông...")

    try:
        model = YOLO(model_path)
        logging.info(f"[{window_name}] M√¥ h√¨nh ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!")
    except Exception as e:
        logging.error(f"[{window_name}] L·ªói t·∫£i m√¥ h√¨nh: {e}")
        return

    retry_count = 0
    cap = None

    # üîπ Ki·ªÉm tra n·∫øu RTSP tr·ªëng th√¨ d√πng video m·∫´u
    if rtsp_url:
        logging.info(f"[{window_name}] ƒêang k·∫øt n·ªëi RTSP: {rtsp_url}")
        while retry_count < MAX_RETRY:
            cap = cv2.VideoCapture(rtsp_url, cv2.CAP_FFMPEG)
            cap.set(cv2.CAP_PROP_FPS, 30)
            cap.set(cv2.CAP_PROP_BUFFERSIZE, 0)
            cap.set(cv2.CAP_PROP_POS_FRAMES, cap.get(cv2.CAP_PROP_FRAME_COUNT) - 1)
            
            if cap.isOpened():
                logging.info(f"[{window_name}] K·∫øt n·ªëi RTSP th√†nh c√¥ng!")
                actual_fps = cap.get(cv2.CAP_PROP_FPS)
                logging.info(f"[{window_name}] FPS th·ª±c t·∫ø c·ªßa lu·ªìng: {actual_fps}")
                break
            else:
                logging.warning(f"[{window_name}] L·ªói m·ªü RTSP! ƒêang th·ª≠ l·∫°i ({retry_count+1}/{MAX_RETRY})...")
                cap.release()
                time.sleep(3)
                retry_count += 1
    else:
        logging.info(f"[{window_name}] ƒêang ch·∫°y demo v·ªõi video m·∫´u: {video_path}")
        cap = cv2.VideoCapture(video_path)

    if not cap or not cap.isOpened():
        logging.error(f"[{window_name}] Kh√¥ng th·ªÉ m·ªü ngu·ªìn video sau {MAX_RETRY} l·∫ßn th·ª≠!")
        return

    paused = False
    last_inference = 0
    last_alert_time = 0

    cv2.namedWindow(window_name, cv2.WINDOW_NORMAL)
    cv2.resizeWindow(window_name, DISPLAY_WIDTH, DISPLAY_HEIGHT)

    while True:
        time.sleep(0.1)
       # üîπ B·ªè qua khung h√¨nh c≈© ƒë·ªÉ l·∫•y khung h√¨nh m·ªõi nh·∫•t
        cap.retrieve()
        ret, frame = cap.read()

        if not ret:
            if rtsp_url:
                logging.warning(f"[{window_name}] M·∫•t k·∫øt n·ªëi RTSP, ƒëang th·ª≠ l·∫°i...")
                cap.release()
                time.sleep(3)
                retry_count = 0
                while retry_count < MAX_RETRY:
                    cap = cv2.VideoCapture(rtsp_url)
                    if cap.isOpened():
                        logging.info(f"[{window_name}] K·∫øt n·ªëi RTSP th√†nh c√¥ng!")
                        break
                    else:
                        logging.warning(f"[{window_name}] L·ªói m·ªü RTSP! ƒêang th·ª≠ l·∫°i ({retry_count+1}/{MAX_RETRY})...")
                        cap.release()
                        time.sleep(3)
                        retry_count += 1
                if not cap or not cap.isOpened():
                    logging.error(f"[{window_name}] Kh√¥ng th·ªÉ k·∫øt n·ªëi l·∫°i RTSP sau {MAX_RETRY} l·∫ßn th·ª≠!")
                    break
                continue
            else:
                logging.error(f"[{window_name}] Video m·∫´u k·∫øt th√∫c!")
                break

        # üîπ Gi·ªØ nguy√™n ph·∫ßn ch·∫°y inference m·ªói v√†i gi√¢y ƒë·ªÉ gi·∫£m t·∫£i
        current_time = time.time()
        display_frame = frame.copy()
        last_detected = None  # üÜï Bi·∫øn l∆∞u tr·∫°ng th√°i ng∆∞·ªùi ƒë√£ ƒë∆∞·ª£c ph√°t hi·ªán
        alert_detected = False
        detected_classes = [] 
        if current_time - last_inference >= processing_interval:
            last_inference = current_time
            try:
                results = model(display_frame)[0]
                alert_detected = False
                for box in results.boxes:
                        x1, y1, x2, y2 = map(int, box.xyxy[0])
                        class_name = model.names[int(box.cls[0])]
                if class_name in classes_to_alert:
                        alert_detected = True
                        detected_classes.append(class_name)  # üÜï L∆∞u t·∫•t c·∫£ class
                if class_name in classes_to_alert and (last_detected != class_name or current_time - last_alert_time >= ALERT_INTERVAL):
                        last_detected = class_name  # üÜï C·∫≠p nh·∫≠t tr·∫°ng th√°i ng∆∞·ªùi ƒë√£ ph√°t hi·ªán
                   # üÜï V·∫Ω bounding box cho t·ª´ng ng∆∞·ªùi
                        cv2.rectangle(display_frame, (x1, y1), (x2, y2), (0, 0, 255), 2)
                        cv2.putText(display_frame, f"{class_name}", (x1, y1 - 10), 
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                        cv2.imshow(window_name, display_frame)  # üÜï ƒê·∫£m b·∫£o hi·ªÉn th·ªã ƒë√∫ng ·∫£nh ƒë√£ x·ª≠ l√Ω
                        # üÜï In ra t·ªça ƒë·ªô ƒë·ªÉ ki·ªÉm tra tr√™n terminal
                        print(f"Bounding Box: {x1}, {y1}, {x2}, {y2}")
                if alert_detected and (current_time - last_alert_time >= ALERT_INTERVAL):
                        filename = os.path.join(alert_folder, f"alert_{int(current_time)}.jpg")
                        cv2.imwrite(filename, display_frame)
                        logging.info(f"[{window_name}] L∆∞u ·∫£nh c·∫£nh b√°o: {filename}")
                        if send_alert_to_telegram(display_frame, telegram_token, chat_id):
                            logging.info(f"[{window_name}] ƒê√£ g·ª≠i c·∫£nh b√°o qua Telegram.")
                        last_alert_time = current_time

            except Exception as e:
                logging.error(f"[{window_name}] L·ªói khi inference: {e}")
# Ki·ªÉm tra ph√≠m: 'p' ƒë·ªÉ t·∫°m d·ª´ng, 'q' ƒë·ªÉ tho√°t
        key = cv2.waitKey(1) & 0xFF
        if key == ord('p'):
            paused = not paused
        if key == ord('q'):
            logging.info(f"[{window_name}] Ng∆∞·ªùi d√πng nh·∫•n 'q'. Tho√°t lu·ªìng.")
            break

        if paused:
            pause_frame = frame.copy()
            cv2.putText(pause_frame, "P to Pause Q to Quit", (10, 30),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 255), 2)
            cv2.imshow(window_name, pause_frame)
            continue
    cap.release()
    cv2.destroyWindow(window_name)
    logging.info(f"[{window_name}] ƒê√≥ng k·∫øt n·ªëi.")

# =================== H√ÄM MAIN ===================
def make_transparent(image_path, opacity=30):  # üÜï ƒê·ªô m·ªù 30% (c√≥ th·ªÉ ch·ªânh th·∫•p h∆°n)
    image = Image.open(image_path).convert("RGBA")  
    alpha = image.split()[3]  
    alpha = alpha.point(lambda p: int(p * opacity / 100))  
    image.putalpha(alpha)  
    return ImageTk.PhotoImage(image)

def select_parameters():
       # Ch·ªâ cho ph√©p ti·∫øn tr√¨nh ch√≠nh ch·∫°y giao di·ªán
    if current_process().name != "MainProcess":
        logging.error("Ti·∫øn tr√¨nh con kh√¥ng ƒë∆∞·ª£c ph√©p ch·∫°y giao di·ªán!")
        return {}  # NgƒÉn ti·∫øn tr√¨nh con m·ªü l·∫°i giao di·ªán
    # üÜï Kh·ªüi t·∫°o params ƒë√∫ng c√°ch
    params = {"telegram_token": "", "chat_id": "", "rtsp_links": [], "model_path": "", "alert_folder": "", "video_path": ""}

    root = tk.Tk()
    root.title("C·∫•u h√¨nh Camera & M√¥ h√¨nh")
    root.geometry("800x600")  # Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc c·ª≠a s·ªï

  # üÜï C√°c bi·∫øn ch·ª©a th√¥ng s·ªë c·ªßa giao di·ªán
    telegram_token_var = tk.StringVar()
    chat_id_var = tk.StringVar()
    rtsp_var1 = tk.StringVar()
    rtsp_var2 = tk.StringVar()
    rtsp_var3 = tk.StringVar()
    rtsp_var4 = tk.StringVar()
    model_path_var = tk.StringVar()
    alert_folder_var = tk.StringVar(value=os.path.join(os.getcwd(), "alert_images"))
    video_path_var = tk.StringVar()

     # üÜï H√†m ch·ªçn file m√¥ h√¨nh
    def browse_model():
        fp = filedialog.askopenfilename(title="Ch·ªçn file m√¥ h√¨nh (best.pt)", filetypes=[("PyTorch Model", "*.pt"), ("All files", "*.*")])
        if fp:
            model_path_var.set(fp)

    # üÜï H√†m ch·ªçn th∆∞ m·ª•c l∆∞u ·∫£nh c·∫£nh b√°o
    def browse_folder():
        folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c l∆∞u ·∫£nh c·∫£nh b√°o")
        if folder:
            alert_folder_var.set(folder)

    # üÜï H√†m ch·ªçn file video m·∫´u
    def browse_video():
        file_path = filedialog.askopenfilename(title="Ch·ªçn video m·∫´u", filetypes=[("Video Files", "*.mp4 *.avi *.mov")])
        if file_path:
            video_path_var.set(file_path)


    # üÜï ƒê·ªçc ·∫£nh logo v√† resize n·∫øu c·∫ßn
    image = Image.open("D:/nhan_dien_nguoi_la/logo.jpg").resize((400, 300))
    bg_image = ImageTk.PhotoImage(image)


# üÜï Hi·ªÉn th·ªã logo n·ªÅn v·ªõi ƒë·ªô trong su·ªët
    bg_image = make_transparent("D:/nhan_dien_nguoi_la/logo.jpg", opacity=30)
    bg_label = tk.Label(root, image=bg_image)
    bg_label.place(x=0, y=0, relwidth=1, relheight=1)  
    bg_label.lower()  # üÜï ƒê·∫£m b·∫£o logo kh√¥ng che ph·∫ßn nh·∫≠p li·ªáu


 # üÜï ƒê·∫∑t logo l√†m n·ªÅn b·∫±ng Label
    bg_label = tk.Label(root, image=bg_image)
    bg_label.place(x=0, y=0, relwidth=1, relheight=1)  # üÜï ƒê·∫∑t logo n·ªÅn ƒë√∫ng v·ªã tr√≠
    bg_label.lower()  # üÜï ƒê∆∞a logo xu·ªëng d∆∞·ªõi ƒë·ªÉ tr√°nh ch·∫∑n √¥ nh·∫≠p li·ªáu

  # üÜï Gi·ªØ ·∫£nh ƒë·ªÉ tr√°nh b·ªã xo√° (ƒê·∫∑t sau khi `bg_label` ƒë√£ kh·ªüi t·∫°o)
    bg_label.image = bg_image

     # üÜï T·∫°o canvas v√† ƒë·∫∑t ·∫£nh l√†m background
    canvas = tk.Canvas(root, width=800, height=600)
    canvas.place(x=0, y=0, width=800, height=600)
    canvas.create_image(400, 300, anchor="center", image=bg_image)
    canvas.image = bg_image 


# üÜï ƒê·∫∑t c√°c th√†nh ph·∫ßn giao di·ªán
    tk.Label(root, text="Telegram Token:", bg="#f0f0f0").place(x=50, y=50)
    tk.Entry(root, textvariable=telegram_token_var, width=50).place(x=200, y=50)

    tk.Label(root, text="Telegram Chat ID:").place(x=50, y=100)
    tk.Entry(root, textvariable=chat_id_var, width=50).place(x=200, y=100)

    tk.Label(root, text="RTSP Link 1:").place(x=50, y=150)
    tk.Entry(root, textvariable=rtsp_var1, width=50).place(x=200, y=150)

    tk.Label(root, text="RTSP Link 2:").place(x=50, y=200)
    tk.Entry(root, textvariable=rtsp_var2, width=50).place(x=200, y=200)

    tk.Label(root, text="RTSP Link 3:").place(x=50, y=250)
    tk.Entry(root, textvariable=rtsp_var3, width=50).place(x=200, y=250)

    tk.Label(root, text="RTSP Link 4:").place(x=50, y=300)
    tk.Entry(root, textvariable=rtsp_var4, width=50).place(x=200, y=300)

    tk.Label(root, text="Model Path (best.pt):").place(x=50, y=350)
    tk.Entry(root, textvariable=model_path_var, width=50).place(x=200, y=350)
    tk.Button(root, text="Browse", command=browse_model).place(x=510, y=348)  # üÜï D·ªãch n√∫t sang ph·∫£i

    tk.Label(root, text="Alert Image Folder:").place(x=50, y=400)
    tk.Entry(root, textvariable=alert_folder_var, width=50).place(x=200, y=400)
    tk.Button(root, text="Browse", command=browse_folder).place(x=510, y=398)  # üÜï D·ªãch n√∫t sang ph·∫£i

    tk.Label(root, text="Video Test:").place(x=50, y=450)
    tk.Entry(root, textvariable=video_path_var, width=50).place(x=200, y=450)
    tk.Button(root, text="Browse", command=browse_video).place(x=510, y=448)  # üÜï D·ªãch n√∫t sang ph·∫£i

    
    # N√∫t Start: L∆∞u c√°c th√¥ng tin v√† ƒë√≥ng c·ª≠a s·ªï
    def on_start():
        params["telegram_token"] = telegram_token_var.get()
        params["chat_id"] = chat_id_var.get()
        params["rtsp_links"] = [rtsp_var1.get(), rtsp_var2.get(), rtsp_var3.get(), rtsp_var4.get()]  # üÜï Th√™m RTSP Link 4
        params["model_path"] = model_path_var.get()
        params["alert_folder"] = alert_folder_var.get()
        params["video_path"] = video_path_var.get() if not any(params["rtsp_links"]) else None  # üÜï N·∫øu kh√¥ng c√≥ RTSP, d√πng video test
        
        root.destroy()
        run_camera(params)  # üÜï G·ªçi x·ª≠ l√Ω nh·∫≠n di·ªán ngay sau khi ch·ªçn xong

# üÜï C·∫≠p nh·∫≠t giao di·ªán b·∫±ng `place()`
    tk.Button(root, text="Start", command=on_start, width=20).place(x=250, y=500)

    root.mainloop()

    # Ki·ªÉm tra n·∫øu thi·∫øu Token ho·∫∑c Chat ID th√¨ b√°o l·ªói
    if not params["telegram_token"] or not params["chat_id"]:
        logging.error("L·ªói: Telegram Token ho·∫∑c Chat ID ch∆∞a nh·∫≠p!")
        return {}

    logging.info(f"D·ªØ li·ªáu ƒë√£ nh·∫≠p: {params}")
    return params
# =================== H√ÄM MAIN ===================
if __name__ == "__main__":
    # D√†nh cho vi·ªác ch·∫°y EXE tr√™n Windows v·ªõi multiprocessing
    freeze_support()
    try:
        set_start_method('spawn')
    except RuntimeError:
        pass

    # Ch·ªâ ti·∫øn tr√¨nh ch√≠nh m·ªõi th·ª±c hi·ªán c√°c b∆∞·ªõc d∆∞·ªõi ƒë√¢y
    if current_process().name != "MainProcess":
        exit()

    params = select_parameters()
    if not params or not params.get("rtsp_links"):
        logging.error("L·ªói: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ select_parameters()")
        exit()
    telegram_token = params.get("telegram_token")
    chat_id = params.get("chat_id")
    rtsp_links = params.get("rtsp_links", [])
    model_path = params.get("model_path", "")
    alert_folder = params.get("alert_folder", "")
    video_path = params.get("video_path")  # üÜï Th√™m video m·∫´u

    if not os.path.exists(model_path):
        logging.error("Thi·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o!")
        exit()

    logging.info("Ch∆∞∆°ng tr√¨nh b·∫Øt ƒë·∫ßu x·ª≠ l√Ω camera...")

    processes = []
    # üîπ N·∫øu c√≥ RTSP, ch·∫°y t·ª´ng camera
    if any(rtsp_links):
        for idx, rtsp_url in enumerate(rtsp_links):
            window_name = f"Camera {idx+1}"
            p = Process(target=run_camera, args=(rtsp_url, window_name, model_path, alert_folder, PROCESSING_INTERVAL, telegram_token, chat_id))
            p.start()
            processes.append(p)
    else:
        # üîπ N·∫øu kh√¥ng c√≥ RTSP, ch·∫°y video m·∫´u
        window_name = "Demo Video"
        p = Process(target=run_camera, args=(None, window_name, model_path, alert_folder, PROCESSING_INTERVAL, telegram_token, chat_id, video_path))
        p.start()
        processes.append(p)

    for p in processes:
        p.join()