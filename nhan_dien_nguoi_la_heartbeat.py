import sys
import cv2
import time
import os
import math
import threading
import socket
from PIL import Image, ImageTk
import tkinter as tk
from tkinter import ttk
from tkinter import filedialog
import logging
import numpy as np
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s:%(message)s",
    datefmt="%H:%M:%S")
from multiprocessing import Process, current_process, set_start_method, freeze_support
import requests
from ultralytics import YOLO

# H√†m t√¨m path ch√≠nh x√°c cho c·∫£ l√∫c ch·∫°y .py l·∫´n .exe
def resource_path(rel_path):
    """
    Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi t·ªõi t√†i nguy√™n:
    - Khi ch·∫°y exe: _MEIPASS + rel_path
    - Khi ch·∫°y script: th∆∞ m·ª•c ch·ª©a file .py + rel_path
    """
    if hasattr(sys, '_MEIPASS'):
        base = sys._MEIPASS
    else:
        base = os.path.dirname(os.path.abspath(__file__))
    full = os.path.join(base, rel_path)

    # Trong dev-mode: n·∫øu kh√¥ng t√¨m th·∫•y ·ªü rel_path, th·ª≠ fallback v·ªÅ c√πng c·∫•p file .py
    if not os.path.exists(full) and not hasattr(sys, '_MEIPASS'):
        full_fallback = os.path.join(base, os.path.basename(rel_path))
        if os.path.exists(full_fallback):
            full = full_fallback
    return full
# DEBUG: in ra ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß v√† tr·∫°ng th√°i t·ªìn t·∫°i c·ªßa file
logo_rel   = 'nhan_dien_nguoi_la/logo.jpg'
logo_abspath = resource_path(logo_rel)
print(f"[DEBUG]    rel         = {logo_rel}")
print(f"[DEBUG]    _MEIPASS    = {getattr(sys, '_MEIPASS', None)}")
print(f"[DEBUG]    script_dir  = {os.path.dirname(os.path.abspath(__file__))}")
print(f"[DEBUG]    full path   = {logo_abspath}")
print(f"[DEBUG]    exists      = {os.path.exists(logo_abspath)}")

# =================== C·∫§U H√åNH CHUNG ===================
# C√°c l·ªõp ƒë·ªëi t∆∞·ª£ng c·∫ßn c·∫£nh b√°o
classes_to_alert = ["nguoi_la", "nguoi_do", "con_cho", "con_meo", "con_chuot"]
# C√°c h·∫±ng s·ªë x·ª≠ l√Ω
RETRY_DELAY = 10 
MAX_RETRY = 500
RETRY_DELAY = 10
RECONNECT_INTERVAL = 300
RETRY_DELAY_BETWEEN = 5
PROCESSING_INTERVAL = 0    # Ch·∫°y inference m·ªói 1 gi√¢y ƒë·ªÉ gi·∫£m t·∫£i
ALERT_INTERVAL = 60        # C√°ch nhau 60 gi√¢y gi·ªØa c√°c l·∫ßn c·∫£nh b√°o
REPEATED_ALERT_INTERVAL = 300  # 5 ph√∫t gi·ªØa c√°c l·∫ßn c·∫£nh b√°o c√πng m·ªôt ƒë·ªëi t∆∞·ª£ng
window_name = "Camera Feed"
DISPLAY_WIDTH = 400        # C·ª≠a s·ªï video hi·ªÉn th·ªã c√≥ ƒë·ªô r·ªông c·ªë ƒë·ªãnh (kho·∫£ng 4 inch - v√≠ d·ª• 400 pixel)
DISPLAY_HEIGHT = 300       # Chi·ªÅu cao hi·ªÉn th·ªã (b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)
detected_objects = {}  # L∆∞u th√¥ng tin v·ªÅ c√°c ƒë·ªëi t∆∞·ª£ng ƒë√£ ph√°t hi·ªán
last_alert_time = {}
has_lost_connection = False  # üÜï Bi·∫øn tr·∫°ng th√°i ƒë·ªÉ ngƒÉn spam c·∫£nh b√°o
motion_check_interval = 3
frame_idx = 0
full_threshold = 5000
DURATION_THRESH = 1      # gi√¢y
MOVE_THRESH     = 100       # pixel: v√πng di chuy·ªÉn nh·ªè
MATCH_THRESH    = 500       # pixel: ƒë·ªÉ match box v·ªõi tracker
MAX_IDLE        = 1      # gi√¢y: x√≥a tracker kh√¥ng th·∫•y update


# =================== H√ÄM TI·ªÜN √çCH KI·ªÇM TRA INTERNET ===================
def is_internet_available(host="api.telegram.org", port=443, timeout=5):
    try:
        socket.setdefaulttimeout(timeout)
        socket.socket(socket.AF_INET, socket.SOCK_STREAM)\
              .connect((host, port))
        return True
    except Exception:
        return False

# H√†m helper l∆∞u ·∫£nh t·∫°m
def _cache_alert_image(image, alert_folder, prefix, object_id=None):
    os.makedirs(alert_folder, exist_ok=True)
    ts = time.strftime("%Y%m%d_%H%M%S")
    oid = object_id if object_id is not None else "unknown"
    filename = f"{prefix}_{oid}_{ts}.jpg"
    path = os.path.join(alert_folder, filename)
    cv2.imwrite(path, image)
    logging.info(f"Offline cache: l∆∞u ·∫£nh c·∫£nh b√°o t·∫°i {path}")



# =================== H√ÄM G·ª¨I C·∫¢NH B√ÅO ‚ÄòSTRANGER‚Äô ===================
def send_alert_to_telegram(image, telegram_token, chat_id,
                           alert_folder, object_id=None):
    """
    G·ª≠i ·∫£nh stranger alert qua Telegram.
    N·∫øu m·∫•t Internet ho·∫∑c g·ª≠i l·ªói, t·ª± l∆∞u ·∫£nh v√†o alert_folder.
    """
    if not telegram_token or not chat_id:
        logging.error("L·ªói: Telegram Token ho·∫∑c Chat ID ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!")
        return False

    # Ki·ªÉm tra kho·∫£ng c√°ch 2 l·∫ßn c·∫£nh b√°o c√πng object
    current_time = time.time()
    alert_interval = 300  # 5 ph√∫t
    if object_id in last_alert_time:
        if current_time - last_alert_time[object_id] < alert_interval:
            logging.info(f"ƒê·ªëi t∆∞·ª£ng {object_id} ƒë√£ c·∫£nh b√°o g·∫ßn ƒë√¢y, "
                         f"ch·ªù th√™m {alert_interval}s.")
            return False

    # N·∫øu kh√¥ng c√≥ m·∫°ng, l∆∞u t·∫°m v√† tr·∫£ v·ªÅ False
    if not is_internet_available():
        _cache_alert_image(image, alert_folder, prefix="stranger", object_id=object_id)
        return False

    # Th·ª≠ g·ª≠i
    _, img_encoded = cv2.imencode('.jpg', image)
    files = {'photo': ('alert.jpg', img_encoded.tobytes(), 'image/jpeg')}
    url = f"https://api.telegram.org/bot{telegram_token}/sendPhoto"
    data = {'chat_id': chat_id, 'caption': '‚ö†Ô∏è C·∫£nh b√°o! Ph√°t hi·ªán ng∆∞·ªùi l·∫°!'}

    try:
        resp = requests.post(url, files=files, data=data, timeout=10)
        if resp.ok:
            logging.info("ƒê√£ g·ª≠i stranger alert qua Telegram th√†nh c√¥ng.")
            last_alert_time[object_id] = current_time
            return True
        else:
            logging.warning(f"Telegram API l·ªói: {resp.text}")
            _cache_alert_image(image, alert_folder, prefix="stranger", object_id=object_id)
            return False

    except requests.RequestException as e:
        logging.error(f"L·ªói khi g·ª≠i stranger alert (RequestException): {e}")
        _cache_alert_image(image, alert_folder, prefix="stranger", object_id=object_id)
        return False
    except Exception as e:
        logging.error(f"Unexpected error sending stranger alert: {e}")
        _cache_alert_image(image, alert_folder, prefix="stranger", object_id=object_id)
        return False

# =================== H√ÄM G·ª¨I C·∫¢NH B√ÅO ‚ÄòZONE‚Äô ===================
def send_zone_alert_to_telegram(image, telegram_token, chat_id,
                                alert_folder, object_id=None):
    """
    G·ª≠i ·∫£nh zone violation qua Telegram.
    N·∫øu m·∫•t Internet ho·∫∑c g·ª≠i l·ªói, t·ª± l∆∞u ·∫£nh v√†o alert_folder.
    """
    if not telegram_token or not chat_id:
        logging.error("Thi·∫øu Token ho·∫∑c Chat ID khi g·ª≠i zone alert!")
        return False

    # N·∫øu kh√¥ng c√≥ m·∫°ng, l∆∞u t·∫°m v√† tr·∫£ v·ªÅ False
    if not is_internet_available():
        _cache_alert_image(image, alert_folder, prefix="zone", object_id=object_id)
        return False

    _, img_encoded = cv2.imencode('.jpg', image)
    files = {'photo': ('zone_alert.jpg', img_encoded.tobytes(), 'image/jpeg')}
    url = f"https://api.telegram.org/bot{telegram_token}/sendPhoto"
    data = {'chat_id': chat_id, 'caption': 'üöß C·∫¢NH B√ÅO: V√πng nguy hi·ªÉm!'}

    try:
        resp = requests.post(url, files=files, data=data, timeout=10)
        if resp.ok:
            logging.info("ƒê√£ g·ª≠i zone alert qua Telegram th√†nh c√¥ng.")
            return True
        else:
            logging.warning(f"Telegram API l·ªói (zone): {resp.text}")
            _cache_alert_image(image, alert_folder, prefix="zone", object_id=object_id)
            return False

    except requests.RequestException as e:
        logging.error(f"L·ªói khi g·ª≠i zone alert (RequestException): {e}")
        _cache_alert_image(image, alert_folder, prefix="zone", object_id=object_id)
        return False
    except Exception as e:
        logging.error(f"Unexpected error sending zone alert: {e}")
        _cache_alert_image(image, alert_folder, prefix="zone", object_id=object_id)
        return False

# =================== H√ÄM ƒê·∫®Y ·∫¢NH TR·ª∞C TI·∫æP KH√îNG GI·ªöI H·∫†N ===================
def _push_photo_to_telegram(image, telegram_token, chat_id, caption):
    try:
        _, img_encoded = cv2.imencode('.jpg', image)
        files = {'photo': ('alert.jpg', img_encoded.tobytes(), 'image/jpeg')}
        url   = f"https://api.telegram.org/bot{telegram_token}/sendPhoto"
        data  = {'chat_id': chat_id, 'caption': caption}
        resp  = requests.post(url, files=files, data=data, timeout=10)
        if resp.ok:
            logging.info("Resend th√†nh c√¥ng qua _push_photo_to_telegram.")
        else:
            logging.warning(f"L·ªói khi g·ª≠i ·∫£nh resend: {resp.text}")
        return resp.ok
    except Exception as e:
        logging.error(f"L·ªói trong _push_photo_to_telegram: {e}")
        return False

# =================== H√ÄM GIAO DI·ªÜN CH·ªåN THAM S·ªê (Tkinter GUI) ===================
def make_transparent(img_or_path, opacity=30):  # üÜï ƒê·ªô m·ªù 30% (c√≥ th·ªÉ ch·ªânh th·∫•p h∆°n)
    # 1. M·ªü ·∫£nh n·∫øu ƒë∆∞·ª£c truy·ªÅn path
    if isinstance(img_or_path, str):
        img = Image.open(img_or_path).convert("RGBA")
    else:
        img = img_or_path.convert("RGBA")
    # 2. ƒêi·ªÅu ch·ªânh k√™nh alpha
    r, g, b, a = img.split()
    a = a.point(lambda p: int(p * opacity / 100))
    img.putalpha(a)
    return ImageTk.PhotoImage(img)

def select_parameters():
    # üÜï Kh·ªüi t·∫°o params ƒë√∫ng c√°ch
    params = {"telegram_token": "", "chat_id": "", "rtsp_links": [],"enable_zones": [], "model_path": "", "alert_folder": "", "video_path": ""}
    root = tk.Tk()
    root.title("C·∫•u h√¨nh Camera & M√¥ h√¨nh")
    root.configure(bg="#f0f0f0")  # M√†u n·ªÅn c·ªßa c·ª≠a s·ªï
    root.geometry("800x600")
    style = ttk.Style()
    style.theme_use("clam")
     # üÜï C√°c bi·∫øn ch·ª©a th√¥ng s·ªë c·ªßa giao di·ªán
    telegram_token_var = tk.StringVar()
    chat_id_var = tk.StringVar()
    rtsp_var1 = tk.StringVar()
    rtsp_var2 = tk.StringVar()
    rtsp_var3 = tk.StringVar()
    rtsp_var4 = tk.StringVar()
    model_path_var = tk.StringVar()
    alert_folder_var = tk.StringVar()
    video_path_var = tk.StringVar()
    # ==== th√™m bi·∫øn ƒë·ªÉ l∆∞u tr·∫°ng th√°i enable zone ====
    enable_zone_var1 = tk.BooleanVar(value=False)
    enable_zone_var2 = tk.BooleanVar(value=False)
    enable_zone_var3 = tk.BooleanVar(value=False)
    enable_zone_var4 = tk.BooleanVar(value=False)
    demo_zone_var = tk.BooleanVar(value=False)

# üÜï H√†m ch·ªçn file m√¥ h√¨nh
    def browse_model():
        fp = filedialog.askopenfilename(title="Ch·ªçn file m√¥ h√¨nh (best.pt)", filetypes=[("PyTorch Model", "*.pt"), ("All files", "*.*")])
        if fp:
            model_path_var.set(fp)
    # üÜï H√†m ch·ªçn th∆∞ m·ª•c l∆∞u ·∫£nh c·∫£nh b√°o
    def browse_folder():
        folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c l∆∞u ·∫£nh c·∫£nh b√°o")
        if folder:
            alert_folder_var.set(folder)
    # üÜï H√†m ch·ªçn file video m·∫´u
    def browse_video():
        file_path = filedialog.askopenfilename(title="Ch·ªçn video m·∫´u", filetypes=[("Video Files", "*.mp4 *.avi *.mov")])
        if file_path:
            video_path_var.set(file_path)
    # üÜï Hi·ªÉn th·ªã logo n·ªÅn v·ªõi ƒë·ªô trong su·ªët
    bg_image = make_transparent(
    resource_path('nhan_dien_nguoi_la/logo.jpg'),
    opacity=30)
    # üÜï ƒê·∫∑t logo l√†m n·ªÅn b·∫±ng Label
    bg_label = tk.Label(root, image=bg_image)
    bg_label.place(x=0, y=0, relwidth=1, relheight=1)
    bg_label.lower()  # üÜï ƒê·∫£m b·∫£o logo kh√¥ng che ph·∫ßn nh·∫≠p li·ªáu
    # üÜï Gi·ªØ ·∫£nh ƒë·ªÉ tr√°nh b·ªã xo√° (ƒê·∫∑t sau khi `bg_label` ƒë√£ kh·ªüi t·∫°o)
    bg_label.image = bg_image
     # üÜï T·∫°o canvas ƒë·ªÉ ƒë·∫∑t ·∫£nh n·ªÅn ph√≠a d∆∞·ªõi
    canvas = tk.Canvas(root, width=800, height=600)
    canvas.place(x=0, y=0, width=800, height=600)
    canvas.create_image(400, 300, anchor="center", image=bg_image)
    canvas.image = bg_image

   # üÜï Th√™m th√¥ng tin t√°c gi·∫£ ph·∫ßn m·ªÅm v√†o g√≥c b√™n ph·∫£i (b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh v·ªã tr√≠ x, y cho ph√π h·ª£p)
    tk.Label(root,
         text="Ph√°t tri·ªÉn b·ªüi: C.P Vietnam Corporation \nSwine Veterinary and Biosecurity Department \n(B·ªô ph·∫≠n Th√∫ y v√† Ph√≤ng d·ªãch)",
         bg="#f0f0f0",
         fg="black",
         font=("Helvetica", 10, "italic")).place(x=510, y=10)
    tk.Label(root, text="Telegram Token:", bg="#f0f0f0", fg="black").place(x=50, y=50)
    tk.Entry(root, textvariable=telegram_token_var, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=50)

    tk.Label(root, text="Telegram Chat ID:", bg="#f0f0f0", fg="black").place(x=50, y=100)
    tk.Entry(root, textvariable=chat_id_var, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=100)

    tk.Label(root, text="RTSP Link 1:", bg="#f0f0f0", fg="black").place(x=50, y=150)
    tk.Entry(root, textvariable=rtsp_var1, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=150)
    tk.Checkbutton(root,
               text="V·∫Ω v√πng c·∫£nh b√°o",
               variable=enable_zone_var1,
               bg="#f0f0f0")\
    .place(x=600, y=150)
    tk.Label(root, text="RTSP Link 2:", bg="#f0f0f0", fg="black").place(x=50, y=200)
    tk.Entry(root, textvariable=rtsp_var2, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=200)
    tk.Checkbutton(root,
               text="V·∫Ω v√πng c·∫£nh b√°o",
               variable=enable_zone_var2,
               bg="#f0f0f0")\
    .place(x=600, y=200)

    tk.Label(root, text="RTSP Link 3:", bg="#f0f0f0", fg="black").place(x=50, y=250)
    tk.Entry(root, textvariable=rtsp_var3, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=250)
    tk.Checkbutton(root,
               text="V·∫Ω v√πng c·∫£nh b√°o",
               variable=enable_zone_var3,
               bg="#f0f0f0")\
    .place(x=600, y=250)
    tk.Label(root, text="RTSP Link 4:", bg="#f0f0f0", fg="black").place(x=50, y=300)
    tk.Entry(root, textvariable=rtsp_var4, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=300)
    tk.Checkbutton(root,
               text="V·∫Ω v√πng c·∫£nh b√°o",
               variable=enable_zone_var4,
               bg="#f0f0f0")\
    .place(x=600, y=300)
    tk.Label(root, text="Model Path (best.pt):", bg="#f0f0f0", fg="black").place(x=50, y=350)
    tk.Entry(root, textvariable=model_path_var, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=350)
    tk.Button(root, text="Browse", command=browse_model, bg="#d3d3d3", fg="black", relief="raised", bd=3).place(x=510, y=348)

    tk.Label(root, text="Alert Image Folder:", bg="#f0f0f0", fg="black").place(x=50, y=400)
    tk.Entry(root, textvariable=alert_folder_var, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=400)
    tk.Button(root, text="Browse", command=browse_folder, bg="#d3d3d3", fg="black", relief="raised", bd=3).place(x=510, y=398)

    tk.Label(root, text="Video Test:", bg="#f0f0f0", fg="black").place(x=50, y=450)
    tk.Entry(root, textvariable=video_path_var, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=450)
    tk.Button(root, text="Browse", command=browse_video, bg="#d3d3d3", fg="black", relief="raised", bd=3).place(x=510, y=448)
    tk.Checkbutton(root,
                   text="V·∫Ω v√πng c·∫£nh b√°o",
                   variable=demo_zone_var,
                   bg="#f0f0f0")\
      .place(x=600, y=450)
    # üÜï N√∫t Start
    def on_start():
        params["telegram_token"] = telegram_token_var.get()
        params["chat_id"] = chat_id_var.get()
        params["rtsp_links"] = [rtsp_var1.get(), rtsp_var2.get(), rtsp_var3.get(), rtsp_var4.get()]
        params["enable_zones"]  = [
        enable_zone_var1.get(),
        enable_zone_var2.get(),
        enable_zone_var3.get(),
        enable_zone_var4.get()]
        params["model_path"] = model_path_var.get()
        params["alert_folder"] = alert_folder_var.get()
        params["video_path"] = video_path_var.get() if not any(params["rtsp_links"]) else None
        params["demo_enable_zone"] = demo_zone_var.get()
        root.destroy()
        run_camera(params)
    # V√≠ d·ª• s·ª≠ d·ª•ng ttk.Button thay cho tk.Button:
    ttk.Button(root, text="Start", command=on_start, style="TButton").place(x=250, y=500)
    root.mainloop()

    # Ki·ªÉm tra n·∫øu thi·∫øu Token ho·∫∑c Chat ID th√¨ kh√¥ng ch·∫°y ti·∫øp
    if not params["telegram_token"] or not params["chat_id"]:
        logging.error("L·ªói: Telegram Token ho·∫∑c Chat ID ch∆∞a nh·∫≠p!")
        return {}
    return params
# =================== H√ÄM X·ª¨ L√ù CAMERA (Ch·∫°y trong ti·∫øn tr√¨nh ri√™ng, kh√¥ng c√≥ GUI) ===================
# H√ÄM G·ª¨I C·∫¢NH B√ÅO ‚ÄòSTRANGER‚Äô
def send_alert_to_telegram(image, telegram_token, chat_id,
                           alert_folder, object_id=None):
    """
    G·ª≠i ·∫£nh stranger alert qua Telegram.
    N·∫øu m·∫•t Internet ho·∫∑c g·ª≠i l·ªói, t·ª± l∆∞u ·∫£nh v√†o alert_folder.
    """
    if not telegram_token or not chat_id:
        logging.error("L·ªói: Telegram Token ho·∫∑c Chat ID ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!")
        return False

    # Ki·ªÉm tra kho·∫£ng c√°ch 2 l·∫ßn c·∫£nh b√°o c√πng object
    current_time = time.time()
    alert_interval = 300  # 5 ph√∫t
    if object_id in last_alert_time:
        if current_time - last_alert_time[object_id] < alert_interval:
            logging.info(f"ƒê·ªëi t∆∞·ª£ng {object_id} ƒë√£ c·∫£nh b√°o g·∫ßn ƒë√¢y, "
                         f"ch·ªù th√™m {alert_interval}s.")
            return False

    # N·∫øu kh√¥ng c√≥ m·∫°ng, l∆∞u t·∫°m v√† tr·∫£ v·ªÅ False
    if not is_internet_available():
        _cache_alert_image(image, alert_folder, prefix="stranger", object_id=object_id)
        return False

    # Th·ª≠ g·ª≠i
    _, img_encoded = cv2.imencode('.jpg', image)
    files = {'photo': ('alert.jpg', img_encoded.tobytes(), 'image/jpeg')}
    url = f"https://api.telegram.org/bot{telegram_token}/sendPhoto"
    data = {'chat_id': chat_id, 'caption': '‚ö†Ô∏è C·∫£nh b√°o! Ph√°t hi·ªán ng∆∞·ªùi l·∫°!'}

    try:
        resp = requests.post(url, files=files, data=data, timeout=10)
        if resp.ok:
            logging.info("ƒê√£ g·ª≠i stranger alert qua Telegram th√†nh c√¥ng.")
            last_alert_time[object_id] = current_time
            return True
        else:
            logging.warning(f"Telegram API l·ªói: {resp.text}")
            _cache_alert_image(image, alert_folder, prefix="stranger", object_id=object_id)
            return False

    except requests.RequestException as e:
        logging.error(f"L·ªói khi g·ª≠i stranger alert (RequestException): {e}")
        _cache_alert_image(image, alert_folder, prefix="stranger", object_id=object_id)
        return False
    except Exception as e:
        logging.error(f"Unexpected error sending stranger alert: {e}")
        _cache_alert_image(image, alert_folder, prefix="stranger", object_id=object_id)
        return False
# =================== H√ÄM G·ª¨I C·∫¢NH B√ÅO ‚ÄòZONE‚Äô ===================
def send_zone_alert_to_telegram(image, telegram_token, chat_id,
                                alert_folder, object_id=None):
    """
    G·ª≠i ·∫£nh zone violation qua Telegram.
    N·∫øu m·∫•t Internet ho·∫∑c g·ª≠i l·ªói, t·ª± l∆∞u ·∫£nh v√†o alert_folder.
    """
    if not telegram_token or not chat_id:
        logging.error("Thi·∫øu Token ho·∫∑c Chat ID khi g·ª≠i zone alert!")
        return False

    # N·∫øu kh√¥ng c√≥ m·∫°ng, l∆∞u t·∫°m v√† tr·∫£ v·ªÅ False
    if not is_internet_available():
        _cache_alert_image(image, alert_folder, prefix="zone", object_id=object_id)
        return False

    _, img_encoded = cv2.imencode('.jpg', image)
    files = {'photo': ('zone_alert.jpg', img_encoded.tobytes(), 'image/jpeg')}
    url = f"https://api.telegram.org/bot{telegram_token}/sendPhoto"
    data = {'chat_id': chat_id, 'caption': 'üöß C·∫¢NH B√ÅO: V√πng nguy hi·ªÉm!'}

    try:
        resp = requests.post(url, files=files, data=data, timeout=10)
        if resp.ok:
            logging.info("ƒê√£ g·ª≠i zone alert qua Telegram th√†nh c√¥ng.")
            return True
        else:
            logging.warning(f"Telegram API l·ªói (zone): {resp.text}")
            _cache_alert_image(image, alert_folder, prefix="zone", object_id=object_id)
            return False

    except requests.RequestException as e:
        logging.error(f"L·ªói khi g·ª≠i zone alert (RequestException): {e}")
        _cache_alert_image(image, alert_folder, prefix="zone", object_id=object_id)
        return False
    except Exception as e:
        logging.error(f"Unexpected error sending zone alert: {e}")
        _cache_alert_image(image, alert_folder, prefix="zone", object_id=object_id)
        return False
# ================ H√†m g·ª≠i tin nh·∫Øn vƒÉn b·∫£n ===================
def send_text_to_telegram(message, telegram_token, chat_id):
    if not telegram_token or not chat_id:
        logging.error("L·ªói: Telegram Token ho·∫∑c Chat ID ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!")
        return False
    # N·∫øu kh√¥ng c√≥ m·∫°ng, b·ªè qua ngay
    if not is_internet_available():
        logging.warning("Offline: kh√¥ng th·ªÉ g·ª≠i text alert, b·ªè qua.")
        return False
    try:
        url = f"https://api.telegram.org/bot{telegram_token}/sendMessage"
        payload = {'chat_id': chat_id, 'text': message}
        response = requests.post(url, json=payload, timeout=10)

        if response.ok:
            logging.info("ƒê√£ g·ª≠i tin nh·∫Øn qua Telegram th√†nh c√¥ng.")
            return True
        else:
            logging.warning(f"Telegram tr·∫£ v·ªÅ l·ªói: {response.text}")
            return False
    except requests.RequestException as e:
        logging.error(f"L·ªói khi g·ª≠i tin nh·∫Øn Telegram (RequestException): {e}")
        return False
    except Exception as e:
        logging.error(f"L·ªói khi g·ª≠i tin nh·∫Øn Telegram (Unexpected): {e}")
        return False
# =================== H√ÄM ƒê·∫®Y ·∫¢NH C≈® L√öC M·∫§T M·∫†NG ===================
def _push_photo_to_telegram(image, telegram_token, chat_id, caption):
    try:
        _, img_encoded = cv2.imencode('.jpg', image)
        files = {'photo': ('alert.jpg', img_encoded.tobytes(), 'image/jpeg')}
        url   = f"https://api.telegram.org/bot{telegram_token}/sendPhoto"
        data  = {'chat_id': chat_id, 'caption': caption}
        resp  = requests.post(url, files=files, data=data, timeout=10)
        if resp.ok:
            logging.info("Resend th√†nh c√¥ng qua _push_photo_to_telegram.")
        else:
            logging.warning(f"L·ªói khi g·ª≠i ·∫£nh resend: {resp.text}")
        return resp.ok
    except Exception as e:
        logging.error(f"L·ªói trong _push_photo_to_telegram: {e}")
        return False

# ============== H√†m ki·ªÉm tra k·∫øt n·ªëi camera RTSP ================
def check_camera_connection(rtsp_url, window_name, telegram_token, chat_id):
    cap = cv2.VideoCapture(rtsp_url)
    opened = cap.isOpened()
    cap.release()
    if not opened:
        logging.error(f"‚ùå [{window_name}] M·∫•t k·∫øt n·ªëi camera!")
        send_text_to_telegram(f"‚ö†Ô∏è C·∫£nh b√°o! M·∫•t k·∫øt n·ªëi v·ªõi {window_name}", telegram_token, chat_id)
        return False
    return True
# ===================== H√†m v·∫Ω Dangerzone=====================
def is_inside_zone(c, polygon):
    """Tr·∫£ v·ªÅ True n·∫øu point c=(x,y) n·∫±m trong polygon."""
    # pointPolygonTest >=0 nghƒ©a n·∫±m trong ho·∫∑c tr√™n bi√™n
    return cv2.pointPolygonTest(polygon, c, False) >= 0
# =================== H√†m g·ª≠i l·∫°i ·∫£nh l∆∞u t·∫°m th·ªùi (khi m·∫•t m·∫°ng) ===================
def resend_cached_alerts(telegram_token, chat_id, alert_folder, interval=60):
    """
    Thread ch·∫°y n·ªÅn: c·ª© m·ªói `interval` gi√¢y, n·∫øu c√≥ Internet,
    resend t·∫•t c·∫£ ·∫£nh .jpg trong alert_folder v√† x√≥a file khi g·ª≠i th√†nh c√¥ng.
    """
    def _worker():
        while True:
            time.sleep(interval)
            # Ch·ªâ resend khi c√≥ m·∫°ng
            if not is_internet_available():
                continue

            for fname in sorted(os.listdir(alert_folder)):
                if not fname.lower().endswith(".jpg"):
                    continue

                path = os.path.join(alert_folder, fname)
                img = cv2.imread(path)
                if img is None:
                    continue

                # Quy ∆∞·ªõc: zone_‚Ä¶ ‚Üí g·ªçi send_zone, kh√°c ‚Üí send_alert
                if fname.startswith("zone_"):
                    ok = _push_photo_to_telegram(img, telegram_token, chat_id,
                                 caption="üöß C·∫¢NH B√ÅO: v√πng nguy hi·ªÉm!")
                else:
                    ok = _push_photo_to_telegram(img, telegram_token, chat_id,
                                 caption="‚ö†Ô∏è C·∫£nh b√°o! Ph√°t hi·ªán ng∆∞·ªùi l·∫°!")
                if ok:
                    try:
                        os.remove(path)
                        logging.info(f"Resend th√†nh c√¥ng, x√≥a file cache: {fname}")
                    except Exception as e:
                        logging.warning(f"Kh√¥ng x√≥a ƒë∆∞·ª£c {fname}: {e}")
                else:
                    logging.warning(f"Resend th·∫•t b·∫°i, gi·ªØ l·∫°i: {fname}")

    t = threading.Thread(target=_worker, daemon=True, name="ResendCacheThread")
    t.start()
# =================== H√ÄM HEARTBEAT (G·ª¨I TEXT M·ªñI 24h) ===================
def start_heartbeat(telegram_token, chat_id, interval=24*3600):
    """
    Thread n·ªÅn: m·ªói `interval` gi√¢y g·ª≠i tin b√°o alive.
    """
    def _hb_worker():
        while True:
            send_text_to_telegram(
                "üü¢ H·ªá th·ªëng gi√°m s√°t v·∫´n ho·∫°t ƒë·ªông.",
                telegram_token, chat_id)
            time.sleep(interval)
    t = threading.Thread(
        target=_hb_worker,
        daemon=True,
        name="HeartbeatThread")
    t.start()
def run_camera(params):
    # Tr√≠ch xu·∫•t tham s·ªë t·ª´ dict
    rtsp_url = params.get("rtsp_url") # Th√™m rtsp_url ri√™ng n·∫øu c√≥
    window_name = params.get("window_name")
    model_path = params.get("model_path")
    alert_folder = params.get("alert_folder")
    processing_interval = params.get("processing_interval")
    telegram_token = params.get("telegram_token")
    chat_id = params.get("chat_id")
    enable_danger_zone = params.get("enable_danger_zone") # renamed for clarity
    video_path = params.get("video_path")
    logging.info(f"[{window_name}] Kh·ªüi ƒë·ªông...")
    rtsp_url = rtsp_url.strip() if rtsp_url else None
    video_ended = False
    last_frame  = None
    # Kh·ªüi ƒë·ªông thread resend ·∫£nh cache khi c√≥ Internet
    os.makedirs(alert_folder, exist_ok=True)
    resend_cached_alerts(telegram_token, chat_id, alert_folder, interval=60)
    # T·∫£i model
    try:
        model = YOLO(model_path)
        logging.info(f"[{window_name}] M√¥ h√¨nh ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!")
    except Exception as e:
        logging.error(f"[{window_name}] L·ªói t·∫£i m√¥ h√¨nh: {e}")
        return
    # M·ªü k·∫øt n·ªëi RTSP ho·∫∑c video m·∫´u
    retry_count = 0
    cap = None
    if rtsp_url:
        while True:
        # ki·ªÉm tra RTSP server c√≥ ph·∫£n h·ªìi hay kh√¥ng
            if not check_camera_connection(rtsp_url, window_name, telegram_token, chat_id):
                logging.warning(f"[{window_name}] Ch∆∞a k·∫øt n·ªëi ƒë∆∞·ª£c RTSP, ch·ªù {RETRY_DELAY}s r·ªìi th·ª≠ l·∫°i")
                time.sleep(RETRY_DELAY)
                continue
            cap = cv2.VideoCapture(rtsp_url)
            cap.set(cv2.CAP_PROP_FPS, 25)
            cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
            if cap.isOpened():
                logging.info(f"[{window_name}] K·∫øt n·ªëi RTSP th√†nh c√¥ng!")
                break
        # n·∫øu ch∆∞a m·ªü ƒë∆∞·ª£c, release v√† ch·ªù retry
            cap.release()
            logging.warning(f"[{window_name}] M·ªü RTSP th·∫•t b·∫°i, ch·ªù {RETRY_DELAY}s r·ªìi th·ª≠ l·∫°i")
            time.sleep(RETRY_DELAY)
    else:
        logging.info(f"[{window_name}] Ch·∫°y v·ªõi video m·∫´u: {video_path}")
        cap = cv2.VideoCapture(video_path)
    # Bi·∫øn tr·∫°ng th√°i k·∫øt n·ªëi
    paused = False
    freeze_frame = None  # Bi·∫øn l∆∞u ·∫£nh d·ª´ng (freeze) khi t·∫°m d·ª´ng
    has_lost_connection = False
    last_inference = 0
    last_alert_time = 0
    trackers = []        # danh s√°ch tracker cho m·ªói camera
    next_id  = 0         # id ti·∫øp theo cho tracker
    entered_zone_ids = set()
    entered_zone_log_ids = set()
    zone_last_alert = {}        # l∆∞u last alert time cho m·ªói box_id trong zone
    stranger_last_alert = {}    # l∆∞u last alert time cho m·ªói stranger (theo ID ho·∫∑c name)
    ZONE_REPEAT_INTERVAL = 300  # 5 ph√∫t
    STRANGER_REPEAT_INTERVAL = 300  # n·∫øu c·∫ßn, 5 ph√∫t gi·ªØa 2 alert stranger c√πng 1 ng∆∞·ªùi
     # Thi·∫øt l·∫≠p c·ª≠a s·ªï hi·ªÉn th·ªã
    cv2.namedWindow(window_name, cv2.WINDOW_NORMAL)
    print(f"[DEBUG] register mouse callback on window: '{window_name}'")
    # üÜï Kh·ªüi t·∫°o bi·∫øn l∆∞u tr·∫°ng th√°i v·∫Ω v√πng c·∫£nh b√°o
    zone_data = {
        "points": [],     # list c√°c ƒë·ªânh (x,y)
        "polygon": None}
    # üÜï H√†m callback ƒë·ªÉ v·∫Ω v√πng b·∫±ng chu·ªôt
    def draw_zone(event, x, y, flags, _):
    # Ch·ªâ v·∫Ω khi ƒëang ·ªü mode v·∫Ω v√† ch∆∞a ho√†n th√†nh polygon
        if not enable_danger_zone or zone_data["polygon"] is not None:
            return
    # Left‚Äêclick: th√™m ƒë·ªânh
        if event == cv2.EVENT_LBUTTONDOWN:
            zone_data["points"].append((x, y))
            logging.info(f"[{window_name}] +Vertex {(x,y)}")
    # Right‚Äêclick: k·∫øt th√∫c polygon khi >=4 ƒëi·ªÉm
        elif event == cv2.EVENT_RBUTTONDOWN:
            if len(zone_data["points"]) >= 4:
                zone_data["polygon"] = np.array(zone_data["points"], np.int32)
                logging.info(f"[{window_name}] Polygon done: {zone_data['polygon']}")
        else:
            logging.warning(f"[{window_name}] C·∫ßn √≠t nh·∫•t 4 ƒëi·ªÉm, hi·ªán c√≥ {len(zone_data['points'])}")
    # üÜï G√°n callback, param = enable_danger_zone
    cv2.setMouseCallback(window_name, draw_zone)
    cap_fps = cap.get(cv2.CAP_PROP_FPS)
    logging.info(f"[{window_name}] FPS lu·ªìng: {cap_fps}")
    fgbg = cv2.createBackgroundSubtractorMOG2(history=100, varThreshold=50, detectShadows=True)
    motion_check_interval = 3
    frame_idx = 0
    consecutive_detections = 0
    detection_required = 1
    min_confidence   = 0.65
    full_threshold = 5000
    entered_zone_ids = set()
    def centroid(x1, y1, x2, y2):
        return ((x1+x2)//2, (y1+y2)//2)
    def dist(a, b):
        return math.hypot(a[0]-b[0], a[1]-b[1])
    print("[DEBUG] entering main loop, waiting for mouse events‚Ä¶")
    while True:
        current_time = time.time()
        # 1) N·∫øu ch∆∞a ƒë·∫øn l√∫c l√†m inference th√¨ v·ª©t 1 frame c≈© v√† loop ti·∫øp
        if current_time - last_inference < PROCESSING_INTERVAL:
            cap.grab()           # x·∫£ 1 frame
            time.sleep(0)
            continue
        # 2) Flush buffer: g·ªçi grab li√™n t·ª•c ƒë·ªÉ ƒë·∫©y h·∫øt frame c≈©
        cap.grab()
        # 3) L·∫•y frame ‚Äún√≥ng‚Äù nh·∫•t
        ret, frame = cap.retrieve()
        if not ret or frame is None:
            # X·ª≠ l√Ω m·∫•t k·∫øt n·ªëi RTSP
            if rtsp_url:
                if not has_lost_connection:
                    logging.warning(f"[{window_name}] M·∫•t k·∫øt n·ªëi RTSP, ƒëang g·ª≠i th√¥ng b√°o...")
                    send_text_to_telegram(
                        f"‚ö†Ô∏è Camera {window_name} m·∫•t k·∫øt n·ªëi RTSP. ƒêang g·ª≠i th√¥ng b√°o...",
                        telegram_token, chat_id)
                    has_lost_connection = True
                cap.release()
                time.sleep(1)
                # ‚Äî B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p v√¥ h·∫°n cho reconnect ‚Äî
                while True:
                    cap = cv2.VideoCapture(rtsp_url)
                    cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)

                    if cap.isOpened():
                        logging.info(f"[{window_name}] ƒê√£ k·∫øt n·ªëi l·∫°i RTSP.")
                        send_text_to_telegram(
                            f"‚úÖ Camera {window_name} ƒë√£ k·∫øt n·ªëi l·∫°i th√†nh c√¥ng.",
                            telegram_token, chat_id)
                        has_lost_connection = False
                        break    # tho√°t v√≤ng l·∫∑p reconnect, quay v·ªÅ x·ª≠ l√Ω b√¨nh th∆∞·ªùng
                    logging.warning(f"[{window_name}] Reconnect th·∫•t b·∫°i, ch·ªù {RETRY_DELAY}s r·ªìi th·ª≠ l·∫°i")
                    time.sleep(RETRY_DELAY)
                continue
            # DEMO MODE: video m·∫´u ƒë√£ k·∫øt th√∫c
            if not video_ended:
                logging.info(f"[{window_name}] Demo video ƒë√£ k·∫øt th√∫c. Ch·ªù ƒë√≥ng c·ª≠a s·ªï ho·∫∑c k·∫øt n·ªëi l·∫°i Internet.")
                # Gi·ªØ l·∫°i khung cu·ªëi c√πng ƒë·ªÉ hi·ªÉn th·ªã
                last_frame = last_frame if last_frame is not None else np.zeros_like(display_frame)
                video_ended = True
            # Hi·ªÉn th·ªã khung cu·ªëi v√† th√¥ng b√°o
            disp = last_frame.copy()
            cv2.putText(disp,
                        "Demo video ended. Press Q to quit.",
                        (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.8,
                        (0, 255, 255), 2)
            cv2.imshow(window_name, disp)
            # Ch·ªù key, v·∫´n cho thread resend ch·∫°y ng·∫ßm
            key = cv2.waitKey(1000) & 0xFF
            if key == ord('q'):
                logging.info(f"[{window_name}] Ng∆∞·ªùi d√πng nh·∫•n 'q'. Tho√°t.")
                break
            else:
                # kh√¥ng ƒë·∫©y khung m·ªõi, ch·ªâ l·∫∑p l·∫°i ƒë·ªÉ ch·ªù Q ho·∫∑c resend
                continue
        # N·∫øu ret=True, c·∫≠p nh·∫≠t last_frame
        last_frame = frame.copy()
        video_ended = False           
        # üîπ Chu·∫©n b·ªã frame & frame‚Äêskipping
        current_time  = time.time()
        display_frame = frame.copy()
            # ‚Äî‚Äî CH√àN V·∫º V√ôNG C·∫¢NH B√ÅO ‚Äî‚Äî
        if enable_danger_zone and zone_data["polygon"] is None:
        # 1) H∆∞·ªõng d·∫´n
                cv2.putText(display_frame,
                "Left-click: add vertex | Right-click: finish (>4 pts) | Q: skip",
                (10,30), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0,255,255), 2)
        # 2) V·∫Ω c√°c ƒëo·∫°n n·ªëi gi·ªØa c√°c ƒëi·ªÉm ƒë√£ ch·ªçn
                pts = zone_data["points"]
                if len(pts) >= 2:
                    arr = np.array(pts, np.int32)
                    cv2.polylines(display_frame,
                        [arr],
                        isClosed=False,
                        color=(0,255,255),
                        thickness=2)
        # 3) V·∫Ω c√°c ƒëi·ªÉm ƒë·ªânh r√µ h∆°n
                for (x,y) in pts:
                    cv2.circle(display_frame, (x,y), 4, (0,255,255), -1)
        # 4) Hi·ªÉn th·ªã & b·∫Øt ph√≠m
                cv2.imshow(window_name, display_frame)
                key = cv2.waitKey(1) & 0xFF
                if key == ord('q'):
                    enable_danger_zone = False
                continue
        # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî Khi polygon ƒë√£ ho√†n th√†nh ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
        if zone_data["polygon"] is not None:
                cv2.polylines(display_frame,
                    [zone_data["polygon"]],
                    isClosed=True,
                    color=(0,255,255),
                    thickness=2)
        # ‚Ä¶ ti·∫øp code x·ª≠ l√Ω inference, alert, hi·ªÉn th·ªã cu·ªëi c√πng ‚Ä¶
        cv2.imshow(window_name, display_frame)
        if rtsp_url:
                    fgmask = fgbg.apply(frame)
                    motion_pixels = cv2.countNonZero(fgmask)
                    if motion_pixels < full_threshold:
                        logging.debug(
                            f"[{window_name}] Motion pixels={motion_pixels} < full_th={full_threshold}, skip")
                        cv2.imshow(window_name, display_frame)
                        if cv2.waitKey(1) & 0xFF == ord('q'):
                            break
                        continue
                    frame_idx += 1
                    if frame_idx % motion_check_interval != 0:
                        cv2.imshow(window_name, display_frame)
                        if cv2.waitKey(1) & 0xFF == ord('q'):
                            break
                        continue
        # üîπ Ch·∫°y inference & tracking khi t·ªõi l∆∞·ª£t
        if rtsp_url is None or current_time - last_inference >= processing_interval:
                    last_inference = current_time
                    detections_this_frame = False
                    try:
                        # ‚îÄ‚îÄ‚îÄ inference & tracking m·ªõi ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                        results = model(display_frame)[0]
                        logging.info(f"[{window_name}] Model tr·∫£ v·ªÅ {len(results.boxes)} boxes")
                        new_trackers = []
                        for box in results.boxes:
                            # 0) Chu·∫©n b·ªã c√°c th√¥ng tin c∆° b·∫£n
                            x1, y1, x2, y2 = map(int, box.xyxy[0])
                            cls_id = int(box.cls[0])
                            conf   = float(box.conf[0])
                            name   = model.names.get(cls_id, str(cls_id))
                            c      = ((x1+x2)//2, (y1+y2)//2)

                            # 1) Match tracker ƒë·ªÉ l·∫•y obj_id
                            matched = None
                            for tr in trackers:
                                if dist(tr['positions'][-1], c) < MATCH_THRESH:
                                    matched = tr
                                    break
                            if matched:
                                matched['positions'].append(c)
                                matched['last'] = current_time
                            else:
                                matched = {
                                    'id'       : next_id,
                                    'positions': [c],
                                    'start'    : current_time,
                                    'last'     : current_time}
                                next_id += 1
                            obj_id = matched['id']
                            new_trackers.append(matched)

                            # 2) T√≠nh net-displacement & static-filter
                            start_pt   = matched['positions'][0]
                            end_pt     = matched['positions'][-1]
                            disp       = math.hypot(end_pt[0]-start_pt[0], end_pt[1]-start_pt[1])
                            track_time = current_time - matched['start']
                            is_static  = (track_time >= DURATION_THRESH and disp < MOVE_THRESH)

                            # 3) Zone-alert (b·ªè qua n·∫øu static)
                            in_zone = enable_danger_zone and zone_data["polygon"] is not None \
                                    and is_inside_zone(c, zone_data["polygon"])
                            if in_zone and conf >= 0.3 and not is_static:
                                last_z = zone_last_alert.get(obj_id, 0)
                                if current_time - last_z >= ZONE_REPEAT_INTERVAL:
                                    zone_last_alert[obj_id] = current_time
                                    cv2.rectangle(display_frame, (x1,y1),(x2,y2),(0,0,255),2)
                                    cv2.putText(display_frame, "DANGER ZONE",
                                                (x1, y1-10),
                                                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0,0,255),2)
                                    send_zone_alert_to_telegram(
                                        display_frame.copy(), telegram_token, chat_id,
                                        alert_folder, object_id=obj_id
                                    )
                                else:
                                    cv2.rectangle(display_frame, (x1,y1),(x2,y2),(0,0,255),2)
                                    cv2.putText(display_frame, "DANGER ZONE",
                                                (x1, y1-10),
                                                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0,0,255),2)
                                continue

                            # 4) Stranger-alert ngo√†i zone (b·ªè qua n·∫øu static)
                            if not in_zone and name in classes_to_alert \
                            and conf >= min_confidence and not is_static:
                                last_s = stranger_last_alert.get(obj_id, 0)
                                if current_time - last_s >= STRANGER_REPEAT_INTERVAL:
                                    stranger_last_alert[obj_id] = current_time
                                    cv2.rectangle(display_frame,(x1,y1),(x2,y2),(0,0,255),2)
                                    cv2.putText(display_frame,f"{name} {conf:.2f}",
                                                (x1, y1-10),
                                                cv2.FONT_HERSHEY_SIMPLEX,0.5,(0,0,255),2)
                                    send_alert_to_telegram(
                                        display_frame.copy(), telegram_token, chat_id,
                                        alert_folder, object_id=obj_id
                                    )
                                else:
                                    cv2.rectangle(display_frame,(x1,y1),(x2,y2),(0,0,255),2)
                                    cv2.putText(display_frame,f"{name} {conf:.2f}",
                                                (x1, y1-10),
                                                cv2.FONT_HERSHEY_SIMPLEX,0.5,(0,0,255),2)
                                continue

                            # 5) Cu·ªëi c√πng: v·∫Ω cho ƒë·ªëi t∆∞·ª£ng tƒ©nh ho·∫∑c c√°c l·ªõp kh√¥ng alert
                            if name in classes_to_alert:
                                # ch·ªâ v·∫Ω n·∫øu ch∆∞a ƒë√°nh d·∫•u static
                                if not is_static:
                                    cv2.rectangle(display_frame,(x1,y1),(x2,y2),(0,0,255),2)
                                    cv2.putText(display_frame,
                                                f"{name} {conf:.2f}",
                                                (x1, y1-10),
                                                cv2.FONT_HERSHEY_SIMPLEX,0.7,(0,0,255),2)
                            else:
                                # c√°c l·ªõp kh√°c hi·ªÉn th·ªã khung nh·∫°t
                                cv2.rectangle(display_frame,(x1,y1),(x2,y2),(200,200,200),1)
                                cv2.putText(display_frame,
                                            f"{name} {conf:.2f}",
                                            (x1, y1-5),
                                            cv2.FONT_HERSHEY_SIMPLEX,0.5,(200,200,200),1)			
                        # d·ªçn tracker idle & c·∫≠p nh·∫≠t
                        trackers = [
                            tr for tr in new_trackers
                            if (current_time - tr['last']) <= MAX_IDLE]
                    except Exception as e:
                        logging.error(f"[{window_name}] L·ªói khi inference: {e}")
        # ‚Äî Ki·ªÉm tra ph√≠m: 'p' ƒë·ªÉ t·∫°m d·ª´ng, 'q' ƒë·ªÉ tho√°t
        key = cv2.waitKey(1) & 0xFF
        if key == ord('p'):
                paused = not paused
                if paused:
                    freeze_frame = frame.copy()
        if key == ord('q'):
                logging.info(f"[{window_name}] Ng∆∞·ªùi d√πng nh·∫•n 'q'. Tho√°t lu·ªìng.")
                break
        if paused:
                pause_frame = (freeze_frame.copy()
                            if freeze_frame is not None else frame.copy())
                cv2.putText(pause_frame, "P to Pause - Q to Quit",
                            (10, 30), cv2.FONT_HERSHEY_SIMPLEX,
                            0.8, (0, 255, 255), 2)
                cv2.imshow(window_name, pause_frame)
                continue
        cv2.imshow(window_name, display_frame)
    cap.release()
    cv2.destroyAllWindows()
    logging.info(f"[{window_name}] ƒê√≥ng k·∫øt n·ªëi.")
# =================== H√ÄM MAIN ===================
def make_transparent(img_or_path, opacity=30):
    """
    img_or_path: PIL.Image ho·∫∑c ƒë∆∞·ªùng d·∫´n file
    opacity: % ƒë·ªô m·ªù  (0-100)
    Tr·∫£ v·ªÅ ImageTk.PhotoImage ·ªü ch·∫ø ƒë·ªô RGBA v·ªõi alpha ƒë√£ ƒëi·ªÅu ch·ªânh.
    """
    # 1. M·ªü ·∫£nh n·∫øu ƒë∆∞·ª£c truy·ªÅn path
    if isinstance(img_or_path, str):
        img = Image.open(img_or_path).convert("RGBA")
    else:
        img = img_or_path.convert("RGBA")
    # 2. ƒêi·ªÅu ch·ªânh k√™nh alpha
    r, g, b, a = img.split()
    a = a.point(lambda p: int(p * opacity / 100))
    img.putalpha(a)
    return ImageTk.PhotoImage(img)
def select_parameters():
       # Ch·ªâ cho ph√©p ti·∫øn tr√¨nh ch√≠nh ch·∫°y giao di·ªán
    if current_process().name != "MainProcess":
        logging.error("Ti·∫øn tr√¨nh con kh√¥ng ƒë∆∞·ª£c ph√©p ch·∫°y giao di·ªán!")
        return {}  # NgƒÉn ti·∫øn tr√¨nh con m·ªü l·∫°i giao di·ªán
    # üÜï Kh·ªüi t·∫°o params ƒë√∫ng c√°ch
    params = {"telegram_token": "", "chat_id": "", "rtsp_links": [], "enable_zones": [], "model_path": "", "alert_folder": "", "video_path": ""}
    root = tk.Tk()
    root.title("C·∫•u h√¨nh Camera & M√¥ h√¨nh")
    root.configure(bg="#f0f0f0")  # M√†u n·ªÅn c·ªßa c·ª≠a s·ªï
    root.geometry("800x600")  # Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc c·ª≠a s·ªï
    style = ttk.Style()
    style.theme_use("clam")
  # üÜï C√°c bi·∫øn ch·ª©a th√¥ng s·ªë c·ªßa giao di·ªán
    telegram_token_var = tk.StringVar()
    chat_id_var = tk.StringVar()
    rtsp_var1 = tk.StringVar()
    rtsp_var2 = tk.StringVar()
    rtsp_var3 = tk.StringVar()
    rtsp_var4 = tk.StringVar()
    # üÜï Khai b√°o BooleanVar tr∆∞·ªõc khi d√πng
    enable_zone_var1 = tk.BooleanVar(value=False)
    enable_zone_var2 = tk.BooleanVar(value=False)
    enable_zone_var3 = tk.BooleanVar(value=False)
    enable_zone_var4 = tk.BooleanVar(value=False)
    model_path_var = tk.StringVar()
    alert_folder_var = tk.StringVar(value=os.path.join(os.getcwd(), "alert_images"))
    video_path_var = tk.StringVar()
    # ==== th√™m bi·∫øn ƒë·ªÉ l∆∞u tr·∫°ng th√°i enable zone ====
    enable_zone_var1 = tk.BooleanVar(value=False)
    enable_zone_var2 = tk.BooleanVar(value=False)
    enable_zone_var3 = tk.BooleanVar(value=False)
    enable_zone_var4 = tk.BooleanVar(value=False)
    demo_zone_var = tk.BooleanVar(value=False)
     # üÜï H√†m ch·ªçn file m√¥ h√¨nh
    def browse_model():
        fp = filedialog.askopenfilename(title="Ch·ªçn file m√¥ h√¨nh (best.pt)", filetypes=[("PyTorch Model", "*.pt"), ("All files", "*.*")])
        if fp:
            model_path_var.set(fp)
    # üÜï H√†m ch·ªçn th∆∞ m·ª•c l∆∞u ·∫£nh c·∫£nh b√°o
    def browse_folder():
        folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c l∆∞u ·∫£nh c·∫£nh b√°o")
        if folder:
            alert_folder_var.set(folder)
    # üÜï H√†m ch·ªçn file video m·∫´u
    def browse_video():
        file_path = filedialog.askopenfilename(title="Ch·ªçn video m·∫´u", filetypes=[("Video Files", "*.mp4 *.avi *.mov")])
        if file_path:
            video_path_var.set(file_path)
    # üÜï ƒê·ªçc ·∫£nh logo v√† resize n·∫øu c·∫ßn
    image = Image.open(resource_path('nhan_dien_nguoi_la/logo.jpg')).resize((400, 300))
    bg_image = ImageTk.PhotoImage(image)
    # üÜï Hi·ªÉn th·ªã logo n·ªÅn v·ªõi ƒë·ªô trong su·ªët
    bg_image = make_transparent(
    resource_path('nhan_dien_nguoi_la/logo.jpg'),
    opacity=30)
    bg_label = tk.Label(root, image=bg_image)
    bg_label.place(x=0, y=0, relwidth=1, relheight=1)
    bg_label.lower()  # üÜï ƒê·∫£m b·∫£o logo kh√¥ng che ph·∫ßn nh·∫≠p li·ªáu
    # üÜï ƒê·∫∑t logo l√†m n·ªÅn b·∫±ng Label
    bg_label = tk.Label(root, image=bg_image)
    bg_label.place(x=0, y=0, relwidth=1, relheight=1)  # üÜï ƒê·∫∑t logo n·ªÅn ƒë√∫ng v·ªã tr√≠
    bg_label.lower()  # üÜï ƒê∆∞a logo xu·ªëng d∆∞·ªõi ƒë·ªÉ tr√°nh ch·∫∑n √¥ nh·∫≠p li·ªáu
    # üÜï Gi·ªØ ·∫£nh ƒë·ªÉ tr√°nh b·ªã xo√° (ƒê·∫∑t sau khi `bg_label` ƒë√£ kh·ªüi t·∫°o)
    bg_label.image = bg_image
     # üÜï T·∫°o canvas v√† ƒë·∫∑t ·∫£nh l√†m background
    canvas = tk.Canvas(root, width=800, height=600)
    canvas.place(x=0, y=0, width=800, height=600)
    canvas.create_image(400, 300, anchor="center", image=bg_image)
    canvas.image = bg_image
     # üÜï Th√™m th√¥ng tin t√°c gi·∫£ ph·∫ßn m·ªÅm v√†o g√≥c b√™n ph·∫£i (b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh v·ªã tr√≠ x, y cho ph√π h·ª£p)
    tk.Label(root,
         text="Ph√°t tri·ªÉn b·ªüi: C.P Vietnam Corporation \nSwine Veterinary and Biosecurity Department \n(B·ªô ph·∫≠n Th√∫ y v√† Ph√≤ng d·ªãch)",
         bg="#f0f0f0",
         fg="black",
         font=("Helvetica", 10, "italic")).place(x=510, y=10)

    tk.Label(root, text="Telegram Token:", bg="#f0f0f0", fg="black").place(x=50, y=50)
    tk.Entry(root, textvariable=telegram_token_var, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=50)

    tk.Label(root, text="Telegram Chat ID:", bg="#f0f0f0", fg="black").place(x=50, y=100)
    tk.Entry(root, textvariable=chat_id_var, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=100)

    tk.Label(root, text="RTSP Link 1:", bg="#f0f0f0", fg="black").place(x=50, y=150)
    tk.Entry(root, textvariable=rtsp_var1, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=150)
    tk.Checkbutton(root,
               text="V·∫Ω v√πng c·∫£nh b√°o",
               variable=enable_zone_var1,
               bg="#f0f0f0")\
    .place(x=600, y=150)
    tk.Label(root, text="RTSP Link 2:", bg="#f0f0f0", fg="black").place(x=50, y=200)
    tk.Entry(root, textvariable=rtsp_var2, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=200)
    tk.Checkbutton(root,
               text="V·∫Ω v√πng c·∫£nh b√°o",
               variable=enable_zone_var2,
               bg="#f0f0f0")\
    .place(x=600, y=200)

    tk.Label(root, text="RTSP Link 3:", bg="#f0f0f0", fg="black").place(x=50, y=250)
    tk.Entry(root, textvariable=rtsp_var3, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=250)
    tk.Checkbutton(root,
               text="V·∫Ω v√πng c·∫£nh b√°o",
               variable=enable_zone_var3,
               bg="#f0f0f0")\
    .place(x=600, y=250)
    tk.Label(root, text="RTSP Link 4:", bg="#f0f0f0", fg="black").place(x=50, y=300)
    tk.Entry(root, textvariable=rtsp_var4, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=300)
    tk.Checkbutton(root,
               text="V·∫Ω v√πng c·∫£nh b√°o",
               variable=enable_zone_var4,
               bg="#f0f0f0")\
    .place(x=600, y=300)

    tk.Label(root, text="Model Path (best.pt):", bg="#f0f0f0", fg="black").place(x=50, y=350)
    tk.Entry(root, textvariable=model_path_var, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=350)
    tk.Button(root, text="Browse", command=browse_model, bg="#d3d3d3", fg="black", relief="raised", bd=3).place(x=510, y=348)

    tk.Label(root, text="Alert Image Folder:", bg="#f0f0f0", fg="black").place(x=50, y=400)
    tk.Entry(root, textvariable=alert_folder_var, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=400)
    tk.Button(root, text="Browse", command=browse_folder, bg="#d3d3d3", fg="black", relief="raised", bd=3).place(x=510, y=398)

    tk.Label(root, text="Video Test:", bg="#f0f0f0", fg="black").place(x=50, y=450)
    tk.Entry(root, textvariable=video_path_var, width=50, bg="#e0e0e0", fg="black", relief="ridge", bd=3).place(x=200, y=450)
    tk.Button(root, text="Browse", command=browse_video, bg="#d3d3d3", fg="black", relief="raised", bd=3).place(x=510, y=448)
    # üÜï Checkbox cho Demo Video
    tk.Checkbutton(root,
                   text="V·∫Ω v√πng c·∫£nh b√°o",
                   variable=demo_zone_var,
                   bg="#f0f0f0")\
      .place(x=600, y=450)
    # N√∫t Start: L∆∞u c√°c th√¥ng tin v√† ƒë√≥ng c·ª≠a s·ªï
    def on_start():
        params["telegram_token"] = telegram_token_var.get()
        params["chat_id"] = chat_id_var.get()
        params["rtsp_links"] = [rtsp_var1.get(), rtsp_var2.get(), rtsp_var3.get(), rtsp_var4.get()]  # üÜï Th√™m RTSP Link 4
        params["enable_zones"]  = [
        enable_zone_var1.get(),
        enable_zone_var2.get(),
        enable_zone_var3.get(),
        enable_zone_var4.get()]
        params["model_path"] = model_path_var.get()
        params["alert_folder"] = alert_folder_var.get()
        params["video_path"] = video_path_var.get() if not any(params["rtsp_links"]) else None  # üÜï N·∫øu kh√¥ng c√≥ RTSP, d√πng video test
        params["demo_enable_zone"] = demo_zone_var.get()
        root.destroy()

# V√≠ d·ª• s·ª≠ d·ª•ng ttk.Button thay cho tk.Button:
    ttk.Button(root, text="Start", command=on_start, style="TButton").place(x=250, y=500)
    root.mainloop()
    # Ki·ªÉm tra n·∫øu thi·∫øu Token ho·∫∑c Chat ID th√¨ b√°o l·ªói
    if not params["telegram_token"] or not params["chat_id"]:
        logging.error("L·ªói: Telegram Token ho·∫∑c Chat ID ch∆∞a nh·∫≠p!")
        return {}
    logging.info(f"D·ªØ li·ªáu ƒë√£ nh·∫≠p: {params}")
    return params

# =================== H√ÄM MAIN ===================
if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s [%(processName)s] %(levelname)s: %(message)s",
        datefmt="%H:%M:%S")
    # D√†nh cho vi·ªác ch·∫°y EXE tr√™n Windows v·ªõi multiprocessing
    freeze_support()
    try:
        set_start_method('spawn')
    except RuntimeError:
        pass
    params = select_parameters()
    if not params or (not any(params.get("rtsp_links")) and not params.get("video_path")):
        logging.error("L·ªói: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ select_parameters() ho·∫∑c kh√¥ng c√≥ ngu·ªìn video/RTSP.")
        exit()
    telegram_token = params.get("telegram_token")
    chat_id = params.get("chat_id")
    rtsp_links = params.get("rtsp_links", [])
    enable_zones = params["enable_zones"]
    model_path = params.get("model_path", "")
    alert_folder = params.get("alert_folder", "")
    video_path = params.get("video_path")  # üÜï Th√™m video m·∫´u
    if not os.path.exists(model_path):
        logging.error("Thi·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o!")
        exit()
    logging.info("Ch∆∞∆°ng tr√¨nh b·∫Øt ƒë·∫ßu x·ª≠ l√Ω camera...")
    processes = []
    if telegram_token and chat_id:
        start_heartbeat(telegram_token, chat_id)
    # üîπ N·∫øu c√≥ RTSP, ch·∫°y t·ª´ng camera
    if any(rtsp_links) and not video_path: # Prioritize RTSP if provided and no video path explicitly selected
        for idx, rtsp_url in enumerate(rtsp_links):
            if not rtsp_url.strip():
                continue
            window_name_cam = f"Camera {idx+1}"
            enable_zone_for_cam = enable_zones[idx] if idx < len(enable_zones) else False
            process_params = {
                "rtsp_url": rtsp_url,
                "window_name": window_name_cam,
                "model_path": model_path,
                "alert_folder": alert_folder,
                "processing_interval": PROCESSING_INTERVAL,
                "telegram_token": telegram_token,
                "chat_id": chat_id,
                "enable_danger_zone": enable_zone_for_cam,
                "video_path": None}
            p = Process(name=window_name_cam, target=run_camera, args=(process_params,))
            p.start()
            processes.append(p)
    else:
        # üîπ N·∫øu kh√¥ng c√≥ RTSP ho·∫∑c video path ƒë∆∞·ª£c ch·ªçn, ch·∫°y video m·∫´u
        if video_path and os.path.exists(video_path):
            window_name_demo = "Demo Video"
            demo_enable = params.get("demo_enable_zone", False)
            process_params = {
                "rtsp_url": None, # Ensure rtsp_url is None for demo video
                "window_name": window_name_demo,
                "model_path": model_path,
                "alert_folder": alert_folder,
                "processing_interval": PROCESSING_INTERVAL,
                "telegram_token": telegram_token,
                "chat_id": chat_id,
                "enable_danger_zone": demo_enable,
                "video_path": video_path}
            p = Process(target=run_camera, args=(process_params,))
            p.start()
            processes.append(p)
        else:
            logging.error("L·ªói: Kh√¥ng c√≥ ngu·ªìn video/RTSP h·ª£p l·ªá ƒë∆∞·ª£c cung c·∫•p.")
            exit()
    for p in processes:
        p.join()